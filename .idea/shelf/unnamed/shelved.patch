Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/ConnectionDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/ConnectionDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/ConnectionDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,93 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import com.palmap.huayitonglib.navi.astar.model.path.Direction;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/12/17.
- */
-public class ConnectionDto extends BaseDto implements Serializable {
-    private Long id;
-    private Long mapId;
-    private Direction direction;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Direction getDirection() {
-        return direction;
-    }
-
-    public void setDirection(Direction direction) {
-        this.direction = direction;
-    }
-
-    public Integer getRank() {
-        return rank;
-    }
-
-    public void setRank(Integer rank) {
-        this.rank = rank;
-    }
-
-    public Long getFromLocationId() {
-        return fromLocationId;
-    }
-
-    public void setFromLocationId(Long fromLocationId) {
-        this.fromLocationId = fromLocationId;
-    }
-
-    public Long getToLocationId() {
-        return toLocationId;
-    }
-
-    public void setToLocationId(Long toLocationId) {
-        this.toLocationId = toLocationId;
-    }
-
-    public Long getFrom() {
-        return from;
-    }
-
-    public void setFrom(Long from) {
-        this.from = from;
-    }
-
-    public Long getTo() {
-        return to;
-    }
-
-    public void setTo(Long to) {
-        this.to = to;
-    }
-
-    public Long getCategoryId() {
-        return categoryId;
-    }
-
-    public void setCategoryId(Long categoryId) {
-        this.categoryId = categoryId;
-    }
-
-    private Integer rank;
-    private Long fromLocationId;
-    private Long toLocationId;
-    private Long from;
-    private Long to;
-    private Long categoryId;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/RegionType.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/RegionType.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/RegionType.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,10 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.region;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/12/28.
- */
-public enum RegionType implements Serializable {
-    PROVINCE, CITY, COUNTY
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Door.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Door.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Door.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,68 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.Feature;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/11/30.
- */
-public class Door extends Feature implements Serializable {
-
-    @JsonIgnore
-    public Long getPlanarGraph() {
-        return getLongProperty("planar_graph");
-    }
-
-    public void setPlanarGraph(Long planarGraph) {
-        setProperty("planar_graph", planarGraph);
-    }
-
-    @JsonIgnore
-    public Long getParentId() {
-        return getLongProperty("parent_id");
-    }
-
-    public void setParentId(Long parentId) {
-        setProperty("parent_id", parentId);
-    }
-
-    @JsonIgnore
-    public Long getLocationId() {
-        return getLongProperty("location_id");
-    }
-
-    public void setLocationId(Long locationId) {
-        setProperty("location_id", locationId);
-    }
-
-    @JsonIgnore
-    public String getDetailType() {
-        return getProperty("detail_type");
-    }
-
-    public void setDetailType(String type) {
-        setProperty("detail_type", type);
-    }
-
-    @JsonIgnore
-    public String getLocationType() {
-        return getProperty("location_type");
-    }
-
-    public void setLocationType(String type) {
-        setProperty("location_type", type);
-    }
-
-    @JsonIgnore
-    public String getDataId() {
-        return getProperty("data_id");
-    }
-
-    public void setDataId(String dataId) {
-        setProperty("data_id", dataId);
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/DaoSession.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/DaoSession.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/DaoSession.java	(revision )
@@ -1,0 +1,0 @@
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Frame.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Frame.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Frame.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,41 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.Feature;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class Frame extends Feature implements Serializable {
-
-    @JsonIgnore
-    public Long getPlanarGraph() {
-        return getLongProperty("planar_graph");
-    }
-
-    public void setPlanarGraph(Long planarGraph) {
-        setProperty("planar_graph", planarGraph);
-    }
-
-    public void setMaxScale(Double maxScale) {
-        setProperty("max_scale", maxScale);
-    }
-
-    @JsonIgnore
-    public Double getMaxScale() {
-        return getProperty("max_scale");
-    }
-
-    public void setMinScale(Double minScale) {
-        setProperty("min_scale", minScale);
-    }
-
-    @JsonIgnore
-    public Double getMinScale() {
-        return getProperty("min_scale");
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/MapDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/MapDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/MapDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,243 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.Geometry;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.annotate.JsonPropertyOrder;
-
-import java.io.Serializable;
-import java.util.Set;
-
-/**
- * Created by admin on 2016/7/21.
- */
-@JsonPropertyOrder({ "id", "dataId", "version", "name" })
-public class MapDto extends BaseDto implements Serializable {
-    private long id;
-    private String name;
-    private String address;
-    private long poi;
-
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    public long getPoi() {
-        return poi;
-    }
-
-    public void setPoi(long poi) {
-        this.poi = poi;
-    }
-
-    public CategoryDto getCategory() {
-        return category;
-    }
-
-    public void setCategory(CategoryDto category) {
-        this.category = category;
-    }
-
-    public Set<String> getTags() {
-        return tags;
-    }
-
-    public void setTags(Set<String> tags) {
-        this.tags = tags;
-    }
-
-    public Coordinate getCoordinate() {
-        return coordinate;
-    }
-
-    public void setCoordinate(Coordinate coordinate) {
-        this.coordinate = coordinate;
-    }
-
-    public Boolean getSpecialName() {
-        return specialName;
-    }
-
-    public void setSpecialName(Boolean specialName) {
-        this.specialName = specialName;
-    }
-
-    public String getEnglishName() {
-        return englishName;
-    }
-
-    public void setEnglishName(String englishName) {
-        this.englishName = englishName;
-    }
-
-    public String getDisplay() {
-        return display;
-    }
-
-    public void setDisplay(String display) {
-        this.display = display;
-    }
-
-    public String getPhone() {
-        return phone;
-    }
-
-    public void setPhone(String phone) {
-        this.phone = phone;
-    }
-
-    public Boolean getMembership() {
-        return membership;
-    }
-
-    public void setMembership(Boolean membership) {
-        this.membership = membership;
-    }
-
-    public Boolean getParking() {
-        return parking;
-    }
-
-    public void setParking(Boolean parking) {
-        this.parking = parking;
-    }
-
-    public Integer getParkingSpace() {
-        return parkingSpace;
-    }
-
-    public void setParkingSpace(Integer parkingSpace) {
-        this.parkingSpace = parkingSpace;
-    }
-
-    public String getParkingFee() {
-        return parkingFee;
-    }
-
-    public void setParkingFee(String parkingFee) {
-        this.parkingFee = parkingFee;
-    }
-
-    public String getOpeningTime() {
-        return openingTime;
-    }
-
-    public void setOpeningTime(String openingTime) {
-        this.openingTime = openingTime;
-    }
-
-    public Set<Long> getPayment() {
-        return payment;
-    }
-
-    public void setPayment(Set<Long> payment) {
-        this.payment = payment;
-    }
-
-    public Long getZipCode() {
-        return zipCode;
-    }
-
-    public void setZipCode(Long zipCode) {
-        this.zipCode = zipCode;
-    }
-
-    public RegionDto getRegion() {
-        return region;
-    }
-
-    public void setRegion(RegionDto region) {
-        this.region = region;
-    }
-
-    public String getLogo() {
-        return logo;
-    }
-
-    public void setLogo(String logo) {
-        this.logo = logo;
-    }
-
-    public Set<String> getHighlights() {
-        return highlights;
-    }
-
-    public void setHighlights(Set<String> highlights) {
-        this.highlights = highlights;
-    }
-
-    public Geometry getAngleLine() {
-        return angleLine;
-    }
-
-    public void setAngleLine(Geometry angleLine) {
-        this.angleLine = angleLine;
-    }
-
-    public boolean isPrivatelyOwned() {
-        return privatelyOwned;
-    }
-
-    public void setPrivatelyOwned(boolean privatelyOwned) {
-        this.privatelyOwned = privatelyOwned;
-    }
-
-    public boolean isMultiBuilding() {
-        return multiBuilding;
-    }
-
-    public void setMultiBuilding(boolean multiBuilding) {
-        this.multiBuilding = multiBuilding;
-    }
-
-    private CategoryDto category;
-    private Set<String> tags;
-    private Coordinate coordinate;
-    @JsonProperty("is_special_name")
-    private Boolean specialName;
-    @JsonProperty("english_name")
-    private String englishName;
-    private String display;
-    private String phone;
-    private Boolean membership;
-    private Boolean parking;
-    @JsonProperty("parking_space")
-    private Integer parkingSpace;
-    @JsonProperty("parking_fee")
-    private String parkingFee;
-    @JsonProperty("opening_time")
-    private String openingTime;
-    private Set<Long> payment;
-    @JsonProperty("zip_code")
-    private Long zipCode;
-    private RegionDto region;
-    private String logo;
-    private Set<String> highlights;
-    @JsonProperty("angle_line")
-    private Geometry angleLine;
-    @JsonIgnore
-    private boolean privatelyOwned;
-    private boolean multiBuilding;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/CategoryLevel.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/CategoryLevel.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/CategoryLevel.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,10 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.category;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/12/29.
- */
-public enum CategoryLevel implements Serializable {
-    ONE, TWO, THREE, FOUR
-}
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ .idea/gradle.xml	(revision )
@@ -11,6 +11,7 @@
             <option value="$PROJECT_DIR$/app" />
             <option value="$PROJECT_DIR$/demo" />
             <option value="$PROJECT_DIR$/huayitonglib" />
+            <option value="$PROJECT_DIR$/lib-astar" />
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Split.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Split.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Split.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,195 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.GeometryFactory;
-import com.vividsolutions.jts.geom.LineString;
-import com.vividsolutions.jts.geom.MultiLineString;
-import com.vividsolutions.jts.geom.MultiPolygon;
-import com.vividsolutions.jts.geom.Point;
-import com.vividsolutions.jts.geom.Polygon;
-import com.vividsolutions.jts.operation.distance.GeometryLocation;
-import com.vividsolutions.jts.operation.polygonize.Polygonizer;
-import com.vividsolutions.jts.operation.union.UnaryUnionOp;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedList;
-
-/**
- * Created by Administrator on 2017/12/1/001.
- */
-
-public class ST_Split {
-    public static final double PRECISION = 1.0E-5D;
-    public static Geometry split(Geometry geomA, Geometry geomB) {
-        if(geomA != null && geomB != null) {
-            if(geomA instanceof Polygon) {
-                return splitPolygonWithLine((Polygon)geomA, (LineString)geomB);
-            } else if(geomA instanceof MultiPolygon) {
-                return splitMultiPolygonWithLine((MultiPolygon)geomA, (LineString)geomB);
-            } else {
-                if(geomA instanceof LineString) {
-                    if(geomB instanceof LineString) {
-                        return splitLineStringWithLine((LineString)geomA, (LineString)geomB);
-                    }
-
-                    if(geomB instanceof Point) {
-                        return splitLineWithPoint((LineString)geomA, (Point)geomB, 1.0E-5D);
-                    }
-                } else if(geomA instanceof MultiLineString) {
-                    if(geomB instanceof LineString) {
-                        return splitMultiLineStringWithLine((MultiLineString)geomA, (LineString)geomB);
-                    }
-
-                    if(geomB instanceof Point) {
-                        return splitMultiLineStringWithPoint((MultiLineString)geomA, (Point)geomB, 1.0E-5D);
-                    }
-                }
-
-                throw new SpatialException("Split a " + geomA.getGeometryType() + " by a " + geomB.getGeometryType() + " is not supported.");
-            }
-        } else {
-            return null;
-        }
-    }
-
-    private static Geometry splitMultiLineStringWithLine(MultiLineString input, LineString cut) {
-        Geometry lines = input.difference(cut);
-        return (Geometry)(lines instanceof LineString?GeometryFactories.default_().createMultiLineString(new LineString[]{(LineString)lines.getGeometryN(0)}):lines);
-    }
-
-    private static MultiLineString splitMultiLineStringWithPoint(MultiLineString multiLineString, Point pointToSplit, double tolerance) {
-        ArrayList linestrings = new ArrayList();
-        boolean notChanged = true;
-        int nb = multiLineString.getNumGeometries();
-
-        for(int i = 0; i < nb; ++i) {
-            LineString subGeom = (LineString)multiLineString.getGeometryN(i);
-            LineString[] result = splitLineStringWithPoint(subGeom, pointToSplit, tolerance);
-            if(result != null) {
-                Collections.addAll(linestrings, result);
-                notChanged = false;
-            } else {
-                linestrings.add(subGeom);
-            }
-        }
-
-        if(!notChanged) {
-            return GeometryFactories.default_().createMultiLineString((LineString[])linestrings.toArray(new LineString[linestrings.size()]));
-        } else {
-            return null;
-        }
-    }
-
-    private static MultiLineString splitLineWithPoint(LineString line, Point pointToSplit, double tolerance) {
-        return GeometryFactories.default_().createMultiLineString(splitLineStringWithPoint(line, pointToSplit, tolerance));
-    }
-
-    private static LineString[] splitLineStringWithPoint(LineString line, Point pointToSplit, double tolerance) {
-        Coordinate[] coords = line.getCoordinates();
-        Coordinate firstCoord = coords[0];
-        Coordinate lastCoord = coords[coords.length - 1];
-        Coordinate coordToSplit = pointToSplit.getCoordinate();
-        if(coordToSplit.distance(firstCoord) > 1.0E-5D && coordToSplit.distance(lastCoord) > 1.0E-5D) {
-            ArrayList firstLine = new ArrayList();
-            firstLine.add(coords[0]);
-            ArrayList secondLine = new ArrayList();
-            GeometryLocation geometryLocation = EditUtilities.getVertexToSnap(line, pointToSplit, tolerance);
-            if(geometryLocation != null) {
-                int segmentIndex = geometryLocation.getSegmentIndex();
-                Coordinate coord = geometryLocation.getCoordinate();
-                boolean index = true;
-
-                for(int gf = 1; gf < coords.length; ++gf) {
-                    int var17 = gf - 1;
-                    if(var17 < segmentIndex) {
-                        firstLine.add(coords[gf]);
-                    } else if(var17 == segmentIndex) {
-                        coord.z = CoordinateUtils.interpolate(coords[gf - 1], coords[gf], coord);
-                        firstLine.add(coord);
-                        secondLine.add(coord);
-                        if(!coord.equals2D(coords[gf])) {
-                            secondLine.add(coords[gf]);
-                        }
-                    } else {
-                        secondLine.add(coords[gf]);
-                    }
-                }
-
-                GeometryFactory var18 = GeometryFactories.default_();
-                LineString lineString1 = var18.createLineString((Coordinate[])firstLine.toArray(new Coordinate[firstLine.size()]));
-                LineString lineString2 = var18.createLineString((Coordinate[])secondLine.toArray(new Coordinate[secondLine.size()]));
-                return new LineString[]{lineString1, lineString2};
-            } else {
-                return null;
-            }
-        } else {
-            return new LineString[]{line};
-        }
-    }
-
-    private static Geometry splitLineStringWithLine(LineString input, LineString cut) {
-        return input.difference(cut);
-    }
-
-    private static Geometry splitMultiPolygonWithLine(MultiPolygon multiPolygon, LineString lineString) {
-        ArrayList allPolygons = new ArrayList();
-
-        for(int i = 0; i < multiPolygon.getNumGeometries(); ++i) {
-            Collection polygons = splitPolygonizer((Polygon)multiPolygon.getGeometryN(i), lineString);
-            if(polygons != null) {
-                allPolygons.addAll(polygons);
-            }
-        }
-
-        if(!allPolygons.isEmpty()) {
-            return GeometryFactories.default_().buildGeometry(allPolygons);
-        } else {
-            return null;
-        }
-    }
-
-    private static Geometry splitPolygonWithLine(Polygon polygon, LineString lineString) {
-        Collection pols = polygonWithLineSplitter(polygon, lineString);
-        return pols != null? GeometryFactories.default_().buildGeometry(polygonWithLineSplitter(polygon, lineString)):null;
-    }
-
-    private static Collection<Polygon> polygonWithLineSplitter(Polygon polygon, LineString lineString) {
-        Collection polygons = splitPolygonizer(polygon, lineString);
-        if(polygons != null && polygons.size() > 1) {
-            ArrayList pols = new ArrayList();
-            Iterator var4 = polygons.iterator();
-
-            while(var4.hasNext()) {
-                Polygon pol = (Polygon)var4.next();
-                if(polygon.contains(pol.getInteriorPoint())) {
-                    pols.add(pol);
-                }
-            }
-
-            return pols;
-        } else {
-            return null;
-        }
-    }
-
-    private static Collection<Polygon> splitPolygonizer(Polygon polygon, LineString lineString) {
-        LinkedList result = new LinkedList();
-        ST_ToMultiSegments.createSegments(polygon.getExteriorRing(), result);
-        result.add(lineString);
-        int holes = polygon.getNumInteriorRing();
-
-        for(int uOp = 0; uOp < holes; ++uOp) {
-            ST_ToMultiSegments.createSegments(polygon.getInteriorRingN(uOp), result);
-        }
-
-        UnaryUnionOp var8 = new UnaryUnionOp(result);
-        Geometry union = var8.union();
-        Polygonizer polygonizer = new Polygonizer();
-        polygonizer.add(union);
-        Collection polygons = polygonizer.getPolygons();
-        return polygons.size() > 1?polygons:null;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/showroute/RouteBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/showroute/RouteBean.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/showroute/RouteBean.java	(revision )
@@ -2,7 +2,7 @@
 
 import com.mapbox.mapboxsdk.geometry.LatLng;
 import com.mapbox.services.commons.geojson.FeatureCollection;
-import com.palmap.huayitonglib.navi.astar.navi.AStarPath;
+import com.palmap.astar.navi.AStarPath;
 
 import java.util.List;
 
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/Category.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/Category.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/Category.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,83 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.category;
-import java.io.Serializable;
-
-/**
- * Created by wyx on 1/18/16.
- */
-public class Category implements Serializable {
-
-    private long id;
-    private String name1;
-    private String name2;
-
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public String getName1() {
-        return name1;
-    }
-
-    public void setName1(String name1) {
-        this.name1 = name1;
-    }
-
-    public String getName2() {
-        return name2;
-    }
-
-    public void setName2(String name2) {
-        this.name2 = name2;
-    }
-
-    public String getName3() {
-        return name3;
-    }
-
-    public void setName3(String name3) {
-        this.name3 = name3;
-    }
-
-    public String getName4() {
-        return name4;
-    }
-
-    public void setName4(String name4) {
-        this.name4 = name4;
-    }
-
-    public String getLogoName() {
-        return logoName;
-    }
-
-    public void setLogoName(String logoName) {
-        this.logoName = logoName;
-    }
-
-    public CategoryLevel getCategoryLevel() {
-        return categoryLevel;
-    }
-
-    public void setCategoryLevel(CategoryLevel categoryLevel) {
-        this.categoryLevel = categoryLevel;
-    }
-
-    public FullCategory getFullCategory() {
-        return fullCategory;
-    }
-
-    public void setFullCategory(FullCategory fullCategory) {
-        this.fullCategory = fullCategory;
-    }
-
-    private String name3;
-    private String name4;
-
-    private String logoName;        //logo名
-    private CategoryLevel categoryLevel;
-    private FullCategory fullCategory;
-}
Index: lib-astar/src/main/java/com/palmap/astar/navi/VertexLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/VertexLoader.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/VertexLoader.java	(revision )
@@ -0,0 +1,194 @@
+/**
+ *
+ */
+package com.palmap.astar.navi;
+
+import com.palmap.astar.navi.entity.Connection;
+import com.palmap.astar.navi.entity.Path;
+import com.palmap.astar.navi.entity.Vertex;
+import com.vividsolutions.jts.geom.Envelope;
+import com.vividsolutions.jts.geom.Geometry;
+import com.vividsolutions.jts.geom.LineString;
+import com.vividsolutions.jts.geom.Point;
+import com.vividsolutions.jts.geom.impl.CoordinateArraySequence;
+import com.vividsolutions.jts.index.quadtree.Quadtree;
+import com.vividsolutions.jts.operation.distance.DistanceOp;
+
+import java.lang.ref.SoftReference;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+
+/**
+ * load vertexes, cache vertexes which are loaded
+ *
+ * @author Vito Zheng
+ */
+public class VertexLoader {
+
+    private PathService pathService;
+
+    private ConcurrentHashMap<Vertex, SoftReference<List<Path>>> pathCache = new ConcurrentHashMap<>();
+    private ConcurrentHashMap<Vertex, SoftReference<List<Path>>> extraPathCache = new ConcurrentHashMap<>();
+    private ConcurrentHashMap<Vertex, SoftReference<List<Connection>>> connectionCache = new ConcurrentHashMap<>();
+
+    public VertexLoader(PathService pathService) {
+        this.pathService = pathService;
+    }
+
+    public AStarVertex findNearestVertexOnNearestPath(Point point, Path nearestPath) {
+        if (nearestPath == null)
+            return null;
+        Vertex vertex = point.distance(nearestPath.getFrom().getShape()) < point.distance(nearestPath.getTo().getShape()) ? nearestPath.getFrom() : nearestPath.getTo();
+        return new AStarVertex(vertex, this);
+    }
+
+    public Path findNearestPath(Point point, long planarGraphId) {
+        Quadtree quadtree = this.pathService.queryQuadTree(planarGraphId);
+        if (quadtree == null) {
+            return null;
+        }
+        Envelope envelop = point.getEnvelopeInternal();
+        Envelope resultEnvelop = new Envelope(
+                envelop.getMinX() - 200,
+                envelop.getMaxX() + 200,
+                envelop.getMinY() - 200,
+                envelop.getMaxY() + 200
+        );
+        List paths = quadtree.query(resultEnvelop);
+        if (paths.isEmpty()) {
+            paths = this.pathService.queryAllPathFromIndex(planarGraphId);
+        }
+        Path result = null;
+        double minDistance = Integer.MAX_VALUE;
+        for (int i = 0; i < paths.size(); i++) {
+            Path path = (Path) paths.get(i);
+            Geometry shape = path.getShape();
+            double distance = DistanceOp.distance(point, shape);
+            if (minDistance > distance) {
+                minDistance = distance;
+                result = path;
+            }
+        }
+        return result;
+    }
+
+    public List<AStarPath> loadPaths(Vertex vertex, boolean needCalcExtraPath) {
+        if (this.pathService != null) {
+            List<AStarPath> aStarPaths = loadPathsFromRedisCache(vertex, needCalcExtraPath);
+            if (aStarPaths != null && !aStarPaths.isEmpty()) {
+                return aStarPaths;
+            }
+        }
+        List<AStarPath> aStarPaths = new ArrayList<>();
+        List<Path> paths = null;
+        if (needCalcExtraPath) {
+            paths = getPathsWithExtraPath(vertex);
+        } else {
+            paths = getPathsWithRealPath(vertex);
+        }
+
+        for (Path p: paths){
+            if (p.getFrom().getId() == vertex.getId()){
+                aStarPaths.add(new AStarLanePath(p, this, false));
+            }else{
+                aStarPaths.add(new AStarLanePath(p, this, true));
+            }
+        }
+
+        List<Connection> connections = null;
+        SoftReference<List<Connection>> ref2 = connectionCache.get(vertex);
+        if (ref2 != null)
+            connections = ref2.get();
+
+        if (connections == null) {
+            connections = getConnectionsFromDB(vertex);
+            connectionCache.put(vertex, new SoftReference<>(connections));
+        }
+
+        for (Connection c: connections){
+            if (c.getFrom().getId() == vertex.getId()){
+                aStarPaths.add(new AStarConnectionPath(c, this, false));
+            }else{
+                aStarPaths.add(new AStarConnectionPath(c, this, true));
+            }
+        }
+
+        return aStarPaths;
+    }
+
+    private List<Connection> getConnectionsFromDB(Vertex vertex) {
+        return this.pathService.queryConnectionsByVertex(vertex);
+    }
+
+    private List<Path> getPathsWithRealPath(Vertex vertex) {
+        List<Path> paths = null;
+        SoftReference<List<Path>> ref = pathCache.get(vertex);
+        if (ref != null)
+            paths = ref.get();
+        if (paths == null) {
+            paths = getPathsFromDB(vertex);
+            pathCache.put(vertex, new SoftReference<>(paths));
+        }
+        return paths;
+    }
+
+    private List<Path> getPathsFromDB(Vertex vertex) {
+        return pathService.queryPathsByVertex(vertex);
+    }
+
+    private List<Path> getPathsWithExtraPath(Vertex vertex) {
+        return pathService.queryPathsByVertex(vertex);
+    }
+
+    private List<AStarPath> loadPathsFromRedisCache(Vertex vertex, boolean needCalcExtraPath) {
+        List<AStarPath> aStarPaths = new ArrayList<>();
+        try {
+            List<Path> paths = null;
+            if (needCalcExtraPath) {
+                paths = getPathsWithExtraPath(vertex);
+            } else {
+                paths = pathService.queryPathsByVertex(vertex);
+            }
+            checkPathSerializable(paths);
+
+            for (Path p : paths){
+                if (p.getFrom().getId() == vertex.getId()){
+                    aStarPaths.add(new AStarLanePath(p, this, false));
+                }else{
+                    aStarPaths.add(new AStarLanePath(p, this, true));
+                }
+            }
+
+            List<Connection> connections = pathService.queryConnectionsByVertex(vertex);
+            for (Connection c : connections){
+                if (c.getFrom().getId() == vertex.getId()){
+                    aStarPaths.add(new AStarConnectionPath(c, this, false));
+                }else{
+                    aStarPaths.add(new AStarConnectionPath(c, this, true));
+                }
+            }
+        } catch (Exception e) {
+            return null;
+        }
+        return aStarPaths;
+    }
+
+    /**
+     * This is a temp approach to fix linestring serializable bug
+     *
+     * @param paths
+     */
+    private void checkPathSerializable(List<Path> paths) {
+        for (Path path : paths) {
+            Vertex from = path.getFrom();
+            Point pathStart = path.getShape().getStartPoint();
+            double check = DistanceOp.distance(from.getShape(), pathStart);
+            if (check < 0.001) {
+                continue;
+            }
+            LineString lineString = (LineString) path.getShape().clone();
+            path.setShape((LineString) lineString.getFactory().createLineString(new CoordinateArraySequence(lineString.getCoordinateSequence())).reverse());
+        }
+    }
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Frames.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Frames.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Frames.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,12 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.FeatureCollection;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class Frames extends FeatureCollection<Frame> implements Serializable {
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/GeometryFactories.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/GeometryFactories.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ lib-astar/src/main/java/com/palmap/astar/navi/geojson/GeometryFactories.java	(revision )
@@ -1,4 +1,4 @@
-package com.palmap.huayitonglib.navi.astar;
+package com.palmap.astar.navi.geojson;
 
 import com.vividsolutions.jts.geom.GeometryFactory;
 import com.vividsolutions.jts.geom.PrecisionModel;
@@ -7,7 +7,7 @@
 import java.util.Map;
 
 /**
- * Created by Administrator on 2017/12/1/001.
+ * Created by Administrator on 2017/12/23/023.
  */
 
 public class GeometryFactories {
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Facility.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Facility.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Facility.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,131 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.Feature;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class Facility extends Feature implements Serializable {
-
-    @JsonIgnore
-    public Long getPlanarGraph() {
-        return getLongProperty("planar_graph");
-    }
-
-    public void setPlanarGraph(Long id) {
-        setProperty("planar_graph", id);
-    }
-
-    @JsonIgnore
-    public String getDetailType() {
-        return getProperty("detail_type");
-    }
-
-    public void setDetailType(String type) {
-        setProperty("detail_type", type);
-    }
-
-    @JsonIgnore
-    public String getLocationType() {
-        return getProperty("location_type");
-    }
-
-    public void setLocationType(String type) {
-        setProperty("location_type", type);
-    }
-
-    @JsonIgnore
-    public String getName() {
-        return getProperty("name");
-    }
-
-    public void setName(String name) {
-        setProperty("name", name);
-    }
-
-    @JsonIgnore
-    public String getAddress() {
-        return getProperty("address");
-    }
-
-    public void setAddress(String address) {
-        setProperty("address", address);
-    }
-
-    @JsonIgnore
-    public String getDisplay() {
-        return getProperty("display");
-    }
-
-    public void setDisplay(String display) {
-        setProperty("display", display);
-    }
-
-    @JsonIgnore
-    public Long getCategory() {
-        return getLongProperty("category");
-    }
-
-    public void setCategory(Long category) {
-        setProperty("category", category);
-    }
-
-    @JsonIgnore
-    public String getLogo() {
-        return getProperty("logo");
-    }
-
-    public void setLogo(String logo) {
-        setProperty("logo", logo);
-    }
-
-    @JsonIgnore
-    public boolean isCommonArea() {
-        return getProperty("common_area");
-    }
-
-    public void setCommonArea(boolean commonArea) {
-        setProperty("common_area", commonArea);
-    }
-
-    @JsonIgnore
-    public Long getAreaId() {
-        return getLongProperty("area_id");
-    }
-
-    public void setAreaId(Long areaId) {
-        setProperty("area_id", areaId);
-    }
-
-    public void setMaxScale(Double maxScale) {
-        setProperty("max_scale", maxScale);
-    }
-
-    @JsonIgnore
-    public Double getMaxScale() {
-        return getProperty("max_scale");
-    }
-
-    public void setMinScale(Double minScale) {
-        setProperty("min_scale", minScale);
-    }
-
-    @JsonIgnore
-    public Double getMinScale() {
-        return getProperty("min_scale");
-    }
-
-    @JsonIgnore
-    public String getDataId() {
-        return getProperty("data_id");
-    }
-
-    public void setDataId(String dataId) {
-        setProperty("data_id", dataId);
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Connection.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Connection.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Connection.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,122 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.path;
-
-import android.text.TextUtils;
-
-import com.palmap.huayitonglib.navi.astar.model.Base;
-
-import java.io.Serializable;
-
-/**
- * Created by Nick on 2016/8/17.
- */
-public class Connection extends Base implements Serializable {
-
-    private Long id;
-    private Long mapId;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Direction getDirection() {
-        return direction;
-    }
-
-    public void setDirection(Direction direction) {
-        this.direction = direction;
-    }
-
-    public Integer getRank() {
-        return rank;
-    }
-
-    public void setRank(Integer rank) {
-        this.rank = rank;
-    }
-
-    public Long getFromLocationId() {
-        return fromLocationId;
-    }
-
-    public void setFromLocationId(Long fromLocationId) {
-        this.fromLocationId = fromLocationId;
-    }
-
-    public Long getToLocationId() {
-        return toLocationId;
-    }
-
-    public void setToLocationId(Long toLocationId) {
-        this.toLocationId = toLocationId;
-    }
-
-    public Long getFromPlanarGraphId() {
-        return fromPlanarGraphId;
-    }
-
-    public void setFromPlanarGraphId(Long fromPlanarGraphId) {
-        this.fromPlanarGraphId = fromPlanarGraphId;
-    }
-
-    public Long getToPlanarGraphId() {
-        return toPlanarGraphId;
-    }
-
-    public void setToPlanarGraphId(Long toPlanarGraphId) {
-        this.toPlanarGraphId = toPlanarGraphId;
-    }
-
-    public Vertex getFrom() {
-        return from;
-    }
-
-    public void setFrom(Vertex from) {
-        this.from = from;
-    }
-
-    public Vertex getTo() {
-        return to;
-    }
-
-    public void setTo(Vertex to) {
-        this.to = to;
-    }
-
-    public Long getCategoryId() {
-        return categoryId;
-    }
-
-    public void setCategoryId(Long categoryId) {
-        this.categoryId = categoryId;
-    }
-
-    private Direction direction;
-    private Integer rank;
-    private Long fromLocationId;
-    private Long toLocationId;
-    private Long fromPlanarGraphId;
-    private Long toPlanarGraphId;
-    private Vertex from;
-    private Vertex to;
-    private Long categoryId;
-
-    public Connection(Long mapId, String direction, Integer rank) {
-        this.mapId = mapId;
-        this.direction = !TextUtils.isEmpty(direction) && direction.toUpperCase().equals("ONEWAY") ? Direction.ONEWAY
-                : Direction.TWOWAY;
-        this.rank = rank;
-    }
-
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/RegionKey.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/RegionKey.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/RegionKey.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,28 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.region;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 1/18/16.
- */
-
-public class RegionKey implements Serializable {
-    private String country;
-    private Long code;
-
-    public String getCountry() {
-        return country;
-    }
-
-    public void setCountry(String country) {
-        this.country = country;
-    }
-
-    public Long getCode() {
-        return code;
-    }
-
-    public void setCode(Long code) {
-        this.code = code;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/TreatedRoadNet.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/TreatedRoadNet.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/TreatedRoadNet.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,187 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.path;
-
-import com.palmap.huayitonglib.navi.astar.geojson.GeoJsonReader;
-import com.palmap.huayitonglib.navi.astar.model.Base;
-import com.vividsolutions.jts.geom.LineString;
-import com.vividsolutions.jts.index.quadtree.Quadtree;
-import com.vividsolutions.jts.io.ParseException;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Created by sifan on 2016/12/19.
- */
-public class TreatedRoadNet extends Base implements Serializable {
-
-    private long mapId;
-    private List<Vertex> vertexes;
-    private Map<Long, Map<Long, List<Path>>> paths;
-    private HashMap<Long,Vertex> vertexList;
-
-    public long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(long mapId) {
-        this.mapId = mapId;
-    }
-
-    public List<Vertex> getVertexes() {
-        return vertexes;
-    }
-
-    public void setVertexes(List<Vertex> vertexes) {
-        this.vertexes = vertexes;
-    }
-
-    public Map<Long, Map<Long, List<Path>>> getPaths() {
-        return paths;
-    }
-
-    public void setPaths(Map<Long, Map<Long, List<Path>>> paths) {
-        this.paths = paths;
-    }
-
-    public Map<Long, Map<Long, List<Connection>>> getConnections() {
-        return connections;
-    }
-
-    public void setConnections(Map<Long, Map<Long, List<Connection>>> connections) {
-        this.connections = connections;
-    }
-
-    public Map<Long, Quadtree> getQuadtrees() {
-        return quadtrees;
-    }
-
-    public void setQuadtrees(Map<Long, Quadtree> quadtrees) {
-        this.quadtrees = quadtrees;
-    }
-
-    private Map<Long, Map<Long, List<Connection>>> connections = new HashMap<>();
-    private Map<Long,Map<Long,Connection>> tmpConnections = new HashMap<>();
-    private Map<Long, Quadtree> quadtrees = new HashMap<>();
-    private GeoJsonReader geoJsonReader;
-    private HashMap<Long,HashMap<Long,Path>> tmpPaths;
-    public TreatedRoadNet(long mapId, JSONArray vertexes, JSONObject rawPaths,JSONObject rawConnections) throws JSONException, ParseException {
-        this.mapId = mapId;
-        vertexList = new HashMap<>();
-        this.vertexes = new ArrayList<>();
-        this.paths = new HashMap<>();
-        tmpPaths = new HashMap<>();
-        geoJsonReader = new GeoJsonReader();
-        for (int i = 0; i < vertexes.length(); i++) {
-            JSONObject vertexJson = vertexes.getJSONObject(i);
-            Vertex vertex = new Vertex(
-                    vertexJson.optLong("mapId"),
-                    geoJsonReader.read(vertexJson.optString("shape")),
-                    vertexJson.optLong("planarGraphId"),
-                    vertexJson.optDouble("altitude")
-            );
-            vertex.setId(vertexJson.optLong("id"));
-            vertex.setDoorId(vertexJson.optLong("doorId"));
-            vertex.setVirtual(vertexJson.optBoolean("virtual"));
-            vertexList.put(vertex.getId(),vertex);
-            this.vertexes.add(vertex);
-        }
-        Iterator<String> keys = rawPaths.keys();
-        while (keys.hasNext()) {
-            long planarGraphId = Long.parseLong(keys.next());
-            JSONObject planarGraphPaths = rawPaths.getJSONObject(planarGraphId + "");
-            HashMap<Long,Path> tempMap = new HashMap<>();
-            tmpPaths.put(planarGraphId,tempMap);
-            Quadtree tempQuadtree = new Quadtree();
-            quadtrees.put(planarGraphId,tempQuadtree);
-            HashMap<Long,List<Path>> tempPath = new HashMap<>();
-            paths.put(planarGraphId,tempPath);
-            Iterator<String> planarGraphPathsKeys = planarGraphPaths.keys();
-            while (planarGraphPathsKeys.hasNext()) {
-                long vertexId = Long.parseLong(planarGraphPathsKeys.next());
-                JSONArray tempArr;
-                tempArr = planarGraphPaths.getJSONArray(vertexId + "");
-                List<Path> tempPathList = new ArrayList<>();
-                tempPath.put(vertexId,tempPathList);
-                for (int i = 0; i < tempArr.length(); i++) {
-                    JSONObject mTempPath = null;
-                    mTempPath = tempArr.getJSONObject(i);
-                    long id = mTempPath.optLong("id");
-                    Path path = this.tmpPaths.get(planarGraphId).get(id);
-                    if (path == null) {
-                        path = new Path(
-                                mTempPath.optLong("mapId"),
-                                mTempPath.optInt("rank"),
-                                mTempPath.optString("direction"),
-                                (LineString) geoJsonReader.read(mTempPath.optString("shape")),
-                                mTempPath.optLong("planarGraphId"),
-                                mTempPath.optLong("pathId"),
-                                mTempPath.optDouble("altitude")
-                        );
-                        path.setId(id);
-                        path.setFrom(vertexList.get(mTempPath.optLong("from")));
-                        path.setTo(vertexList.get(mTempPath.optLong("to")));
-                        tmpPaths.get(planarGraphId).put(id,path);
-                        tempQuadtree.insert(path.getShape().getEnvelopeInternal(),path);
-                    }
-                    tempPathList.add(path);
-                }
-            }
-        }
-        Iterator<String> connectionsKeys = rawConnections.keys();
-        while (connectionsKeys.hasNext()) {
-            JSONObject planarGraphConnections = null;
-            HashMap<Long,Connection> hashMap = new HashMap<>();
-            HashMap<Long,List<Connection>> mappingMap = new HashMap<>();
-            long planarGraphId = Long.parseLong(connectionsKeys.next());
-            tmpConnections.put(planarGraphId,hashMap);
-            connections.put(planarGraphId,mappingMap);
-            planarGraphConnections = rawConnections.optJSONObject(planarGraphId+"");
-            if (planarGraphConnections == null) {
-                continue;
-            }
-            Iterator<String> vertexKeys = planarGraphConnections.keys();
-            while (vertexKeys.hasNext()) {
-                String vertexKey = vertexKeys.next();
-                JSONArray verexConnections = null;
-                ArrayList<Connection> mappingMapList = null;
-                long vertexId = Long.parseLong(vertexKey);
-                verexConnections = planarGraphConnections.optJSONArray(vertexKey);
-                if (verexConnections == null) {
-                    continue;
-                }
-                mappingMapList = new ArrayList<>();
-                mappingMap.put(vertexId,mappingMapList);
-                for (int i = 0; i < verexConnections.length(); i++) {
-                    JSONObject rawConnection = verexConnections.optJSONObject(i);
-                    if (rawConnection == null) {
-                        continue;
-                    }
-                    if (hashMap.get(rawConnection.optLong("id")) == null) {
-                        Connection connection = new Connection(
-                                rawConnection.optLong("mapId"),
-                                rawConnection.optString("direction"),
-                                rawConnection.optInt("rank")
-                        );
-                        connection.setId(rawConnection.optLong("id"));
-                        connection.setFrom(this.vertexList.get(rawConnection.optLong("from")));
-                        connection.setTo(this.vertexList.get(rawConnection.optLong("to")));
-                        connection.setCategoryId(rawConnection.optLong("categoryId"));
-                        hashMap.put(rawConnection.optLong("id"), connection);
-                        mappingMapList.add(connection);
-                    } else {
-                        Connection connection = hashMap.get(rawConnection.optLong("id"));
-                        mappingMapList.add(connection);
-                    }
-                }
-            }
-        }
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/PlanarGraphDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/PlanarGraphDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/PlanarGraphDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,93 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-
-import com.palmap.huayitonglib.navi.astar.model.graph.Areas;
-import com.palmap.huayitonglib.navi.astar.model.graph.Doors;
-import com.palmap.huayitonglib.navi.astar.model.graph.Facilities;
-import com.palmap.huayitonglib.navi.astar.model.graph.Frames;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.annotate.JsonPropertyOrder;
-
-import java.io.Serializable;
-
-/**
- * Created by liupin on 2017/7/24.
- */
-// FIXME: 2017/8/22 Frame Area Facility 必须在Json文档的最前面且顺序不能改变（旧版SDK的实现有问题）
-@JsonPropertyOrder({"Frame", "Area", "Facility", "id", "dataId", "version", "mapId", "buildingId"})
-public class PlanarGraphDto extends BaseDto implements Serializable {
-
-    @JsonProperty("Frame")
-    private Frames frames;
-
-    public Frames getFrames() {
-        return frames;
-    }
-
-    public void setFrames(Frames frames) {
-        this.frames = frames;
-    }
-
-    public Areas getAreas() {
-        return areas;
-    }
-
-    public void setAreas(Areas areas) {
-        this.areas = areas;
-    }
-
-    public Facilities getFacilities() {
-        return facilities;
-    }
-
-    public void setFacilities(Facilities facilities) {
-        this.facilities = facilities;
-    }
-
-    public Doors getDoors() {
-        return doors;
-    }
-
-    public void setDoors(Doors doors) {
-        this.doors = doors;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Long getBuildingId() {
-        return buildingId;
-    }
-
-    public void setBuildingId(Long buildingId) {
-        this.buildingId = buildingId;
-    }
-
-    @JsonProperty("Area")
-
-    private Areas areas;
-    @JsonProperty("Facility")
-    private Facilities facilities;
-    @JsonIgnore
-//    @JsonProperty("Door")
-    private Doors doors;
-
-    private Long id;
-    private Long mapId;
-    private Long buildingId;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Type.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Type.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Type.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,7 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model;
-
-import java.io.Serializable;
-
-public enum Type implements Serializable {
-    LOCATION, BUILDING, PLANAR_GRAPH, FLOOR, FACILITY, AREA, DOOR
-}
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Path.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Path.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Path.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,183 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.path;
-
-import android.text.TextUtils;
-
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.LineString;
-
-import java.io.Serializable;
-
-/**
- * Created by Nick on 2016/8/17.
- */
-public class Path implements Serializable {
-
-    private Long id;
-    private Long mapId;
-    private Integer rank;
-
-    public Path() {}
-
-    public Path(long mapId, int rank, String direction, LineString shape, long planarGraphId, long pathId, double altitude) {
-        this.mapId = mapId;
-        this.rank = rank;
-        this.direction = !TextUtils.isEmpty(direction)&&direction.toUpperCase().equals("ONEWAY") ? Direction.ONEWAY:Direction.TWOWAY;
-        this.shape = shape;
-        this.planarGraphId = planarGraphId;
-        this.id = pathId;
-        this.altitude = altitude;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Integer getRank() {
-        return rank;
-    }
-
-    public void setRank(Integer rank) {
-        this.rank = rank;
-    }
-
-    public Direction getDirection() {
-        return direction;
-    }
-
-    public void setDirection(Direction direction) {
-        this.direction = direction;
-    }
-
-    public Geometry getShape() {
-        return shape;
-    }
-
-    public void setShape(Geometry shape) {
-        this.shape = shape;
-    }
-
-    public Vertex getFrom() {
-        return from;
-    }
-
-    public void setFrom(Vertex from) {
-        this.from = from;
-    }
-
-    public Vertex getTo() {
-        return to;
-    }
-
-    public void setTo(Vertex to) {
-        this.to = to;
-    }
-
-    public Long getPlanarGraphId() {
-        return planarGraphId;
-    }
-
-    public void setPlanarGraphId(Long planarGraphId) {
-        this.planarGraphId = planarGraphId;
-    }
-
-    public Long getPathId() {
-        return pathId;
-    }
-
-    public void setPathId(Long pathId) {
-        this.pathId = pathId;
-    }
-
-    public Double getAltitude() {
-        return altitude;
-    }
-
-    public void setAltitude(Double altitude) {
-        this.altitude = altitude;
-    }
-
-    public Long getFromLocationId() {
-        return fromLocationId;
-    }
-
-    public void setFromLocationId(Long fromLocationId) {
-        this.fromLocationId = fromLocationId;
-    }
-
-    public Long getToLocationId() {
-        return toLocationId;
-    }
-
-    public void setToLocationId(Long toLocationId) {
-        this.toLocationId = toLocationId;
-    }
-
-    public String getLinkId() {
-        return linkId;
-    }
-
-    public void setLinkId(String linkId) {
-        this.linkId = linkId;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public Integer getWeight() {
-        return weight;
-    }
-
-    public void setWeight(Integer weight) {
-        this.weight = weight;
-    }
-
-    public String getAttribute() {
-        return attribute;
-    }
-
-    public void setAttribute(String attribute) {
-        this.attribute = attribute;
-    }
-
-    public Integer getSpeedLimit() {
-        return speedLimit;
-    }
-
-    public void setSpeedLimit(Integer speedLimit) {
-        this.speedLimit = speedLimit;
-    }
-
-    private Direction direction;
-    private Geometry shape;
-    private Vertex from;
-    private Vertex to;
-    private Long planarGraphId;
-    private Long pathId;
-    private Double altitude;
-    private Long fromLocationId;
-    private Long toLocationId;
-
-    private String linkId;
-    private String name;
-    private Integer weight;
-    private String attribute;
-    private Integer speedLimit;
-
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/EditUtilities.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/EditUtilities.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/EditUtilities.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,21 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.Point;
-import com.vividsolutions.jts.operation.distance.DistanceOp;
-import com.vividsolutions.jts.operation.distance.GeometryLocation;
-
-/**
- * Created by Administrator on 2017/12/4/004.
- */
-
-public class EditUtilities {
-    public EditUtilities() {
-    }
-
-    public static GeometryLocation getVertexToSnap(Geometry g, Point p, double tolerance) {
-        DistanceOp distanceOp = new DistanceOp(g, p);
-        GeometryLocation snapedPoint = distanceOp.nearestLocations()[0];
-        return tolerance != 0.0D && snapedPoint.getCoordinate().distance(p.getCoordinate()) > tolerance?null:snapedPoint;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/VertexLoader.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/VertexLoader.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/VertexLoader.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,333 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-import com.palmap.huayitonglib.navi.astar.GeometryFactories;
-import com.palmap.huayitonglib.navi.astar.Lists;
-import com.palmap.huayitonglib.navi.astar.model.PoiInfo;
-import com.palmap.huayitonglib.navi.astar.model.path.Connection;
-import com.palmap.huayitonglib.navi.astar.model.path.Direction;
-import com.palmap.huayitonglib.navi.astar.model.path.Path;
-import com.palmap.huayitonglib.navi.astar.model.path.TreatedRoadNet;
-import com.palmap.huayitonglib.navi.astar.model.path.Vertex;
-import com.palmap.huayitonglib.navi.astar.utils.GeometryUtils;
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.LineString;
-import com.vividsolutions.jts.geom.Point;
-import com.vividsolutions.jts.geom.impl.CoordinateArraySequence;
-import com.vividsolutions.jts.index.quadtree.Quadtree;
-import com.vividsolutions.jts.operation.distance.DistanceOp;
-
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.SortedSet;
-import java.util.TreeSet;
-import java.util.concurrent.atomic.AtomicLong;
-
-/**
- * load vertexes, cache vertexes which are loaded
- *
- * @author Vito Zheng
- */
-public class VertexLoader {
-
-    private static final int GEN_RANK = 10;
-
-    private TreatedRoadNet treatedRoadNet;
-    private Map<Long, List<Path>> tmpVertexPathMap = new HashMap<>();
-    private List<Path> removedPaths = new ArrayList<>();
-
-    // generate vertex/path set id negative
-    private AtomicLong vertexAtomicLong = new AtomicLong(0);
-    private AtomicLong pathAtomicLong = new AtomicLong(0);
-
-    public VertexLoader(TreatedRoadNet treatedRoadNet) {
-        this.treatedRoadNet = treatedRoadNet;
-    }
-
-    public AStarVertex genVertexOnArea(Point point, PoiInfo poi) {
-        Vertex vertex = null;
-        Set<Long> doorIds = poi.doorIds;
-        List<Path> paths = new ArrayList<>();
-        if (doorIds != null && doorIds.size() > 0) {
-            List<Vertex> doorVertexes = new ArrayList<>();
-            for (Long doorId : doorIds) {
-                if (getVertexByDoorId(doorId) != null) {
-                    doorVertexes.add(getVertexByDoorId(doorId));
-                }
-            }
-            if (doorVertexes.size() > 0) {
-                vertex = genNewVertex(point, doorVertexes.get(0));
-                for (Vertex doorVertex : doorVertexes) {
-                    LineString lineString = GeometryFactories.pseudoMercator()
-                            .createLineString(new Coordinate[]{ vertex.getShape().getCoordinate(), doorVertex.getShape().getCoordinate() });
-                    Path path = genNewPath(vertex, doorVertex, lineString, GEN_RANK, Direction.TWOWAY);
-                    paths.add(path);
-                    List<Path> doorVertexPaths = new ArrayList<>();
-                    doorVertexPaths.add(path);
-                    doorVertexPaths.addAll(queryPathsByVertex(doorVertex));
-                    tmpVertexPathMap.put(doorVertex.getId(), doorVertexPaths);
-                }
-
-                tmpVertexPathMap.put(vertex.getId(), paths);
-            }
-        }
-
-        if (vertex == null) return null;
-        return new AStarVertex(vertex, this);
-    }
-
-    @SuppressWarnings("unchecked")
-    public boolean checkAreaHavePaths(PoiInfo poi, Point point) {
-        List<Path> nearPaths = getQuadtree(poi.planarGraphId).query(point.getEnvelopeInternal());
-        for (Path nearPath : nearPaths) {
-            if (poi.shape.contains(nearPath.getShape())) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    public AStarVertex genVertexOnNearestPath(Point point, Path nearestPath) {
-        if (nearestPath == null) {
-            return null;
-        }
-
-        //找到起终点对应的路网    切割最近的路网   并将路网更新
-        Coordinate coordinate = GeometryUtils.getProjectOnLine(point, (LineString) nearestPath.getShape());
-        Point projectPoint = GeometryFactories.pseudoMercator().createPoint(coordinate);
-
-        Vertex vertex;
-        Vertex from = nearestPath.getFrom();
-        Vertex to = nearestPath.getTo();
-
-        // 如果最近路网的一端是联通设施，取路网的另一端
-        List<Connection> connections = queryConnectionsByVertex(from);
-        if (!connections.isEmpty()) {
-            return new AStarVertex(to, this);
-        }
-        connections = queryConnectionsByVertex(to);
-        if (!connections.isEmpty()) {
-            return new AStarVertex(from, this);
-        }
-
-        Long planarGraphId = nearestPath.getPlanarGraphId();
-        Map<Long, List<Path>> pathsMap = treatedRoadNet.getPaths().get(planarGraphId);
-        List<Path> fromPaths = pathsMap.get(from.getId());
-        List<Path> toPaths = pathsMap.get(to.getId());
-
-        if (projectPoint.distance(from.getShape()) < NaviConstants.TOLERANCE) {
-            vertex = from;
-        } else if (projectPoint.distance(to.getShape()) < NaviConstants.TOLERANCE) {
-            vertex = to;
-        } else {
-            vertex = genNewVertex(projectPoint, from);
-            List<Geometry> spilt = GeometryUtils.spilt(nearestPath.getShape(), projectPoint);
-            Path path1 = genNewPath(from, vertex, nearestPath, (LineString) spilt.get(0));
-            Path path2 = genNewPath(vertex, to, nearestPath, (LineString) spilt.get(1));
-
-            List<Path> genFromPaths = Lists.newArrayList();
-            genFromPaths.addAll(fromPaths);
-            genFromPaths.remove(nearestPath);
-            genFromPaths.add(path1);
-            tmpVertexPathMap.put(from.getId(), genFromPaths);
-
-            List<Path> genToPaths = Lists.newArrayList();
-            genToPaths.addAll(toPaths);
-            genToPaths.remove(nearestPath);
-            genToPaths.add(path2);
-            tmpVertexPathMap.put(to.getId(), genToPaths);
-            tmpVertexPathMap.put(vertex.getId(), Lists.newArrayList(path1, path2));
-
-            removedPaths.add(nearestPath);
-        }
-        return new AStarVertex(vertex, this);
-    }
-
-    @SuppressWarnings("unchecked")
-    public Path findNearestPath(Point point, long planarGraphId) {
-        Quadtree quadtree = getQuadtree(planarGraphId);
-        if (quadtree == null) {
-            return null;
-        }
-
-        List<Path> paths = quadtree.queryAll();
-        if (paths.size() > 100) {
-            paths = quadtree.query(point.getEnvelopeInternal());
-        }
-        if (paths.isEmpty()) {
-            return null;
-        }
-
-        checkPathSerializable(paths);
-        SortedSet<DistancePath> set = new TreeSet<>(new SortByDistance());
-        for (Path path : paths) {
-            Geometry line = path.getShape();
-            double distance = DistanceOp.distance(point, line);
-            set.add(new DistancePath(distance, path));
-        }
-        return set.first().getPath();
-    }
-
-    public List<AStarPath> loadPaths(Vertex vertex, boolean needCalcExtraPath) {
-        List<AStarPath> aStarPaths = new ArrayList<>();
-        List<Path> paths = queryPathsByVertex(vertex);
-        List<Path> tempPaths = new ArrayList<>();
-        if (!needCalcExtraPath) {
-            for (Path path : paths) {
-                if (path.getRank() == 10) continue;
-                tempPaths.add(path);
-            }
-            paths.clear();
-            paths.addAll(tempPaths);
-        }
-        if (!paths.isEmpty()) {
-            checkPathSerializable(paths);
-            for (Path path : paths) {
-                if (path.getFrom().getId().equals(vertex.getId())) {
-                    aStarPaths.add(new AStarLanePath(path,this,false));
-                }else {
-                    aStarPaths.add(new AStarLanePath(path,this,true));
-                }
-            }
-        }
-
-        List<Connection> connections = new ArrayList<>();
-        List<Connection> mconnections = queryConnectionsByVertex(vertex);
-        for (Connection connection : mconnections) {
-            if (connection.getTo() != null) {
-                connections.add(connection);
-            }
-        }
-        if (connections.isEmpty()) {
-            return aStarPaths;
-        }
-        for (Connection connection : connections) {
-            if (connection.getFrom().getId().equals(vertex.getId())) {
-                aStarPaths.add(new AStarConnectionPath(connection,this,false));
-            }else {
-                aStarPaths.add(new AStarConnectionPath(connection,this,false));
-            }
-        }
-        return aStarPaths;
-    }
-
-    /**
-     * This is a temp approach to fix linestring serializable bug
-     *
-     * @param paths
-     */
-    private void checkPathSerializable(List<Path> paths) {
-        for (Path path : paths) {
-            Vertex from = path.getFrom();
-            Point pathStart = ((LineString) path.getShape()).getStartPoint();
-            double check = DistanceOp.distance(from.getShape(), pathStart);
-            if (check < 0.001) {
-                continue;
-            }
-            LineString lineString = (LineString) path.getShape().clone();
-            path.setShape(lineString.getFactory().createLineString(new CoordinateArraySequence(lineString.getCoordinateSequence())).reverse());
-        }
-    }
-
-    private Vertex genNewVertex(Point point, Vertex refer) {
-        if (point == null) {
-            return null;
-        }
-        Vertex vertex = new Vertex();
-        vertex.setId(vertexAtomicLong.decrementAndGet());
-        vertex.setShape(point);
-        vertex.setPlanarGraphId(refer.getPlanarGraphId());
-        vertex.setMapId(refer.getMapId());
-        vertex.setAltitude(refer.getAltitude());
-        return vertex;
-    }
-
-    public Path genNewPath(Vertex from, Vertex to, Path refer, LineString lineString) {
-        Path path = new Path();
-        path.setId(pathAtomicLong.decrementAndGet());
-        path.setShape(lineString);
-        path.setFrom(from);
-        path.setTo(to);
-        path.setPlanarGraphId(refer.getPlanarGraphId());
-        path.setMapId(refer.getMapId());
-        path.setDirection(refer.getDirection());
-        path.setRank(refer.getRank());
-        path.setPathId(refer.getId());
-        path.setAltitude(refer.getAltitude());
-        return path;
-    }
-
-    public Path genNewPath(Vertex from, Vertex to, LineString lineString, int rank, Direction direction) {
-        Path path = new Path();
-        path.setId(pathAtomicLong.decrementAndGet());
-        path.setShape(lineString);
-        path.setFrom(from);
-        path.setTo(to);
-        path.setPlanarGraphId(from.getPlanarGraphId());
-        path.setMapId(from.getMapId());
-        path.setAltitude(from.getAltitude());
-        path.setPathId(path.getId());
-        path.setRank(rank);
-        path.setDirection(direction);
-        return path;
-    }
-
-    public Quadtree getQuadtree(long planarGraphId) {
-        if (treatedRoadNet == null) return null;
-        return treatedRoadNet.getQuadtrees().get(planarGraphId);
-    }
-
-    private Vertex getVertexByDoorId(long doorId) {
-        if (treatedRoadNet == null) return null;
-        for (Vertex vertex : treatedRoadNet.getVertexes()) {
-            if (vertex.getDoorId() != null && vertex.getDoorId().equals(doorId)) {
-                return vertex;
-            }
-        }
-        return null;
-    }
-
-    public List<Path> queryPathsByVertex(Vertex vertex) {
-        List<Path> paths = new ArrayList<>();
-        if (tmpVertexPathMap.containsKey(vertex.getId())) {
-            paths = tmpVertexPathMap.get(vertex.getId());
-        } else {
-            if (treatedRoadNet != null) {
-                Map<Long, List<Path>> vertexPathsMap = treatedRoadNet.getPaths().get(vertex.getPlanarGraphId());
-                if (vertexPathsMap != null && vertexPathsMap.get(vertex.getId()) != null) {
-                    paths = vertexPathsMap.get(vertex.getId());
-                }
-            }
-        }
-
-        paths.removeAll(removedPaths);
-        return paths;
-    }
-
-    @SuppressWarnings("unchecked")
-    public List<Path> queryAllPathsFromIndex(long planarGraphId) {
-        if (treatedRoadNet == null) return new ArrayList<>();
-        return treatedRoadNet.getQuadtrees().get(planarGraphId).queryAll();
-    }
-
-    public List<Connection> queryConnectionsByVertex(Vertex vertex) {
-        if (treatedRoadNet == null) return new ArrayList<>();
-        Map<Long, List<Connection>> vertexConnectionsMap = treatedRoadNet.getConnections().get(vertex.getPlanarGraphId());
-        if (vertexConnectionsMap == null || vertexConnectionsMap.get(vertex.getId()) == null) {
-            return new ArrayList<>();
-        } else {
-            return vertexConnectionsMap.get(vertex.getId());
-        }
-    }
-
-    private class SortByDistance implements Comparator<DistancePath> {
-        @Override
-        public int compare(DistancePath o1, DistancePath o2) {
-            return o1.getDistance().compareTo(o2.getDistance());
-        }
-    }
-}
Index: lib-astar/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/proguard-rules.pro	(revision )
+++ lib-astar/proguard-rules.pro	(revision )
@@ -0,0 +1,25 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/wtm/Library/Android/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_ToMultiSegments.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_ToMultiSegments.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_ToMultiSegments.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,72 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.CoordinateArrays;
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.GeometryCollection;
-import com.vividsolutions.jts.geom.GeometryFactory;
-import com.vividsolutions.jts.geom.LineString;
-import com.vividsolutions.jts.geom.MultiLineString;
-import com.vividsolutions.jts.geom.Polygon;
-
-import java.util.LinkedList;
-import java.util.List;
-
-/**
- * Created by Administrator on 2017/12/4/004.
- */
-
-public class ST_ToMultiSegments {
-    public ST_ToMultiSegments() {
-    }
-    public static MultiLineString createSegments(Geometry geom) {
-        if(geom != null) {
-            GeometryFactory gf = GeometryFactories.default_();
-            if(geom.getDimension() > 0) {
-                LinkedList result = new LinkedList();
-                createSegments((Geometry)geom, result);
-                return gf.createMultiLineString((LineString[])result.toArray(new LineString[result.size()]));
-            } else {
-                return gf.createMultiLineString((LineString[])null);
-            }
-        } else {
-            return null;
-        }
-    }
-
-    private static void createSegments(Geometry geom, List<LineString> result) {
-        if(geom instanceof LineString) {
-            createSegments((LineString)geom, result);
-        } else if(geom instanceof Polygon) {
-            createSegments((Polygon)geom, result);
-        } else if(geom instanceof GeometryCollection) {
-            createSegments((GeometryCollection)geom, result);
-        }
-
-    }
-
-    public static void createSegments(LineString geom, List<LineString> result) {
-        Coordinate[] coords = CoordinateArrays.removeRepeatedPoints(geom.getCoordinates());
-
-        for(int j = 0; j < coords.length - 1; ++j) {
-            LineString lineString = GeometryFactories.default_().createLineString(new Coordinate[]{coords[j], coords[j + 1]});
-            result.add(lineString);
-        }
-
-    }
-
-    private static void createSegments(Polygon polygon, List<LineString> result) {
-        createSegments(polygon.getExteriorRing(), result);
-
-        for(int i = 0; i < polygon.getNumInteriorRing(); ++i) {
-            createSegments(polygon.getInteriorRingN(i), result);
-        }
-
-    }
-
-    private static void createSegments(GeometryCollection geometryCollection, List<LineString> result) {
-        for(int i = 0; i < geometryCollection.getNumGeometries(); ++i) {
-            createSegments(geometryCollection.getGeometryN(i), result);
-        }
-
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RoadNetDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RoadNetDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RoadNetDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,39 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-import java.io.Serializable;
-import java.util.List;
-
-/**
- * Created by liupin on 2017/7/31.
- */
-public class RoadNetDto extends BaseDto implements Serializable {
-
-    private long mapId;
-    private List<RoadDto> roads;
-
-    public long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(long mapId) {
-        this.mapId = mapId;
-    }
-
-    public List<RoadDto> getRoads() {
-        return roads;
-    }
-
-    public void setRoads(List<RoadDto> roads) {
-        this.roads = roads;
-    }
-
-    public List<ConnectionDto> getConnections() {
-        return connections;
-    }
-
-    public void setConnections(List<ConnectionDto> connections) {
-        this.connections = connections;
-    }
-
-    private List<ConnectionDto> connections;
-
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/G.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/G.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/G.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,8 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-/**
- * Created by wyx on 9/1/15.
- */
-public interface G {
-    double G(AStarVertex current, AStarPath path, double floorHeightDiff);
-}
Index: lib-astar/src/main/java/com/palmap/astar/navi/G.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/G.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/G.java	(revision )
@@ -0,0 +1,8 @@
+package com.palmap.astar.navi;
+
+/**
+ * Created by wyx on 9/1/15.
+ */
+public interface G {
+    double G(AStarVertex current, AStarPath path, boolean onSameFloor);
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Ints.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Ints.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Ints.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,16 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-/**
- * Created by Administrator on 2017/12/1/001.
- */
-
-public class Ints {
-    public static final int BYTES = 4;
-    public static final int MAX_POWER_OF_TWO = 1073741824;
-
-    private Ints() {
-    }
-    public static int saturatedCast(long value) {
-        return value > 2147483647L?2147483647:(value < -2147483648L?-2147483648:(int)value);
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/BaseDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/BaseDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/BaseDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,52 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-
-/**
- * Created by liupin on 2017/8/20.
- */
-public class BaseDto implements Serializable {
-
-    @JsonIgnore
-    private long sceneId;
-    private String dataId;
-
-    public long getSceneId() {
-        return sceneId;
-    }
-
-    public void setSceneId(long sceneId) {
-        this.sceneId = sceneId;
-    }
-
-    public String getDataId() {
-        return dataId;
-    }
-
-    public void setDataId(String dataId) {
-        this.dataId = dataId;
-    }
-
-    public String getVersion() {
-        return version;
-    }
-
-    public void setVersion(String version) {
-        this.version = version;
-    }
-
-    public boolean isActive() {
-        return active;
-    }
-
-    public void setActive(boolean active) {
-        this.active = active;
-    }
-
-    private String version;
-    @JsonIgnore
-    private boolean active;
-
-}
Index: lib-astar/src/main/java/com/palmap/astar/navi/entity/Vertex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/entity/Vertex.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/entity/Vertex.java	(revision )
@@ -0,0 +1,104 @@
+package com.palmap.astar.navi.entity;
+
+import com.vividsolutions.jts.geom.Geometry;
+import com.vividsolutions.jts.geom.Point;
+
+import java.util.Objects;
+
+/**
+ * Created by wyx on 8/26/15.
+ */
+public class Vertex {
+
+    private double altitude;
+
+    private long id;
+
+    private Point shape;
+
+    private long planarGraph;
+
+    private boolean virtual;
+
+    private long mapId;
+
+    public Vertex() {
+    }
+
+    public Vertex(long mapId, Point shape, long planarGraphId, double altitude) {
+        this.mapId = mapId;
+        this.shape = shape;
+        this.planarGraph = planarGraphId;
+        this.altitude = altitude;
+    }
+
+    public long getMapId() {
+        return mapId;
+    }
+
+    public void setMapId(long mapId) {
+        this.mapId = mapId;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public Geometry getShape() {
+        return shape;
+    }
+
+    public long getPlanarGraph() {
+        return planarGraph;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public void setShape(Point shape) {
+        this.shape = shape;
+    }
+
+    public void setPlanarGraph(long planarGraph) {
+        this.planarGraph = planarGraph;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Vertex vertex = (Vertex) o;
+        return Objects.equals(id, vertex.id);
+    }
+
+    public double getAltitude() {
+        return altitude;
+    }
+
+    public void setAltitude(double altitude) {
+        this.altitude = altitude;
+    }
+
+    public boolean isVirtual() {
+        return virtual;
+    }
+
+    public void setVirtual(boolean virtual) {
+        this.virtual = virtual;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(id);
+    }
+
+    @Override
+    public String toString() {
+        return "Vertex{" +
+                "id=" + id +
+                ", shape=" + shape +
+                ", planarGraph=" + planarGraph +
+                '}';
+    }
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Direction.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Direction.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Direction.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,10 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.path;
-
-import java.io.Serializable;
-
-/**
- * Created by Nick on 2016/8/17.
- */
-public enum Direction implements Serializable {
-    ONEWAY, TWOWAY
-}
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DefaultG.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DefaultG.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DefaultG.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,42 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-
-import com.palmap.huayitonglib.navi.astar.utils.CategoryUtils;
-
-/**
- * Created by wyx on 9/2/15.
- */
-public class DefaultG implements G {
-    @Override
-    public double G(AStarVertex current, AStarPath path, double floorHeightDiff) {
-        if (path instanceof AStarLanePath) {
-            return path.getWeight();
-        } else if (path instanceof AStarConnectionPath) {
-            long categoryId = ((AStarConnectionPath) path).getConnection().getCategoryId();
-            if (floorHeightDiff == 0) {
-                return 10000;
-            }
-            if (floorHeightDiff > 13) {
-                if (!CategoryUtils.isElevator(categoryId)) {
-                    return 10000;
-                }
-            } else {
-                if (CategoryUtils.isStair(categoryId)) {
-                    return 10000;
-                }
-                if (CategoryUtils.isElevator(categoryId)) {
-                    if (current.getParent() != null) {
-                        AStarPath lastPath = current.getParent().findPath(current);
-                        if (lastPath instanceof AStarConnectionPath) {
-                            long lastPathCategoryId = ((AStarConnectionPath) lastPath).getConnection().getCategoryId();
-                            if (CategoryUtils.isElevator(lastPathCategoryId)) return 30;
-                        }
-                    }
-                    return 190;
-                }
-            }
-            return 60;
-        }
-        return 0;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/VertexDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/VertexDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/VertexDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,124 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import com.vividsolutions.jts.geom.Geometry;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2017/9/11.
- */
-public class VertexDto implements Serializable {
-    private Long id;
-    private Long mapId;
-    private Geometry shape;
-    private Long planarGraphId;
-    private Double altitude;
-    private Boolean virtual;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Geometry getShape() {
-        return shape;
-    }
-
-    public void setShape(Geometry shape) {
-        this.shape = shape;
-    }
-
-    public Long getPlanarGraphId() {
-        return planarGraphId;
-    }
-
-    public void setPlanarGraphId(Long planarGraphId) {
-        this.planarGraphId = planarGraphId;
-    }
-
-    public Double getAltitude() {
-        return altitude;
-    }
-
-    public void setAltitude(Double altitude) {
-        this.altitude = altitude;
-    }
-
-    public Boolean getVirtual() {
-        return virtual;
-    }
-
-    public void setVirtual(Boolean virtual) {
-        this.virtual = virtual;
-    }
-
-    public String getNodeId() {
-        return nodeId;
-    }
-
-    public void setNodeId(String nodeId) {
-        this.nodeId = nodeId;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public Long getDoorId() {
-        return doorId;
-    }
-
-    public void setDoorId(Long doorId) {
-        this.doorId = doorId;
-    }
-
-    public Long getEscalatorId() {
-        return escalatorId;
-    }
-
-    public void setEscalatorId(Long escalatorId) {
-        this.escalatorId = escalatorId;
-    }
-
-    public Long getPublicServiceId() {
-        return publicServiceId;
-    }
-
-    public void setPublicServiceId(Long publicServiceId) {
-        this.publicServiceId = publicServiceId;
-    }
-
-    public boolean isFacility() {
-        return facility;
-    }
-
-    public void setFacility(boolean facility) {
-        this.facility = facility;
-    }
-
-    private String nodeId;
-    private String name;
-    private Long doorId;
-    private Long escalatorId;
-    private Long publicServiceId;
-
-    @JsonIgnore
-    private boolean facility;
-}
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/PoiInfo.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/PoiInfo.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/PoiInfo.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,16 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model;
-
-import com.vividsolutions.jts.geom.Geometry;
-
-import java.io.Serializable;
-import java.util.Set;
-
-/**
- * Created by Administrator on 2017/12/5/005.
- */
-
-public class PoiInfo implements Serializable {
-    public Long planarGraphId;
-    public Set<Long> doorIds;
-    public Geometry shape;
-}
Index: huayitonglib/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/build.gradle	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/build.gradle	(revision )
@@ -66,4 +66,5 @@
     //讯飞
     compile files('libs/Msc.jar')
     compile files('libs/Sunflower.jar')
+    compile project(':lib-astar')
 }
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Doors.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Doors.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Doors.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,12 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.FeatureCollection;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/11/30.
- */
-public class Doors extends FeatureCollection<Door> implements Serializable {
-}
Index: lib-astar/src/main/java/com/palmap/astar/navi/PathService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/PathService.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/PathService.java	(revision )
@@ -0,0 +1,204 @@
+package com.palmap.astar.navi;
+
+import com.palmap.astar.navi.entity.Connection;
+import com.palmap.astar.navi.entity.Path;
+import com.palmap.astar.navi.entity.Vertex;
+import com.palmap.astar.navi.geojson.GeoJsonReader;
+import com.vividsolutions.jts.geom.LineString;
+import com.vividsolutions.jts.geom.Point;
+import com.vividsolutions.jts.index.quadtree.Quadtree;
+import com.vividsolutions.jts.io.ParseException;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+
+/**
+ * Created by wtm on 2017/8/2.
+ */
+public class PathService {
+
+    private static final String TAG = "PathService";
+
+    //////////////////
+    //private WKTReader wktReader;
+
+    private GeoJsonReader geoJsonReader;
+
+    //////////////////
+    private HashMap<Long, Vertex> vertexList;
+
+    //////////////////
+    private HashMap<Long, HashMap<Long, Path>> _paths;
+    private HashMap<Long, Quadtree> _quadtreeMapping = new HashMap<>();
+    private HashMap<Long, HashMap<Long, ArrayList<Path>>> _pathsMapping = new HashMap<>();
+
+
+    //////////////////
+    private HashMap<Long, HashMap<Long, Connection>> _connections = new HashMap<>();
+    private HashMap<Long, HashMap<Long, ArrayList<Connection>>> _connectionsMapping = new HashMap<>();
+
+    public PathService(String vertexes, String paths, String connections) throws JSONException, ParseException, NumberFormatException {
+        this(new JSONArray(vertexes), new JSONObject(paths), new JSONObject(connections));
+    }
+
+    public PathService(JSONArray vertexes, JSONObject rawPaths, JSONObject rawConnections) throws JSONException, ParseException {
+        vertexList = new HashMap<>();
+        _paths = new HashMap<>();
+        //wktReader = new WKTReader();
+
+        geoJsonReader = new GeoJsonReader();
+
+        for (int i = 0; i < vertexes.length(); i++) {
+            JSONObject vertexJson = vertexes.getJSONObject(i);
+
+            Vertex vertex = new Vertex(
+                    vertexJson.optLong("mapId"),
+                    (Point) geoJsonReader.read(vertexJson.optString("shape")),
+                    vertexJson.optLong("planarGraphId"),
+                    vertexJson.optDouble("altitude"));
+
+            vertex.setId(vertexJson.optLong("id"));
+            vertex.setVirtual(vertexJson.optBoolean("virtual"));
+            vertexList.put(vertex.getId(), vertex);
+        }
+
+        Iterator<String> keys = rawPaths.keys();
+        while (keys.hasNext()) {
+            long planarGraphId = Long.parseLong(keys.next());
+            JSONObject planarGraphPaths = rawPaths.getJSONObject(planarGraphId + "");
+            HashMap<Long, Path> tempMap = new HashMap<>();
+            this._paths.put(planarGraphId, tempMap);
+            Quadtree tempQuadtree = new Quadtree();
+            this._quadtreeMapping.put(planarGraphId, tempQuadtree);
+            HashMap<Long, ArrayList<Path>> tempPathsMapping = new HashMap<>();
+
+            this._pathsMapping.put(planarGraphId, tempPathsMapping);
+
+            Iterator<String> planarGraphPathsKeys = planarGraphPaths.keys();
+            while (planarGraphPathsKeys.hasNext()) {
+                long vertexId = Long.parseLong(planarGraphPathsKeys.next());
+                JSONArray tempArr = null;
+                try {
+                    tempArr = planarGraphPaths.getJSONArray(vertexId + "");
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    continue;
+                }
+                ArrayList<Path> tempPathList = new ArrayList<>();
+                tempPathsMapping.put(vertexId, tempPathList);
+                for (int i = 0; i < tempArr.length(); i++) {
+                    JSONObject tempPath = null;
+                    try {
+                        tempPath = tempArr.getJSONObject(i);
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                        continue;
+                    }
+                    long id = tempPath.optLong("id");
+                    Path path = this._paths.get(planarGraphId).get(id);
+                    if (path == null) {
+                        path = new Path(
+                                tempPath.optLong("mapId"),
+                                tempPath.optInt("rank"),
+                                tempPath.optString("direction"),
+                                (LineString) geoJsonReader.read(tempPath.optString("shape")),
+                                tempPath.optLong("planarGraphId"),
+                                tempPath.optLong("pathId"),
+                                tempPath.optDouble("altitude")
+                        );
+                        path.setId(id);
+                        path.setFrom(vertexList.get(tempPath.optLong("from")));
+                        path.setTo(vertexList.get(tempPath.optLong("to")));
+
+                        this._paths.get(planarGraphId).put(id, path);
+                        tempQuadtree.insert(path.getShape().getEnvelopeInternal(), path);
+                    }
+                    tempPathList.add(path);
+                }
+            }
+        }
+
+
+        Iterator<String> connectionsKeys = rawConnections.keys();
+        while (connectionsKeys.hasNext()) {
+            JSONObject planarGraphConnections = null;
+            HashMap<Long, Connection> hashMap = new HashMap<>();
+            HashMap<Long, ArrayList<Connection>> mappingMap = new HashMap<>();
+            long planarGraphId = Long.parseLong(connectionsKeys.next());
+            this._connections.put(planarGraphId, hashMap);
+            this._connectionsMapping.put(planarGraphId, mappingMap);
+            planarGraphConnections = rawConnections.optJSONObject(planarGraphId + "");
+            if (null == planarGraphConnections) {
+                continue;
+            }
+
+            Iterator<String> vertexKeys = planarGraphConnections.keys();
+            while (vertexKeys.hasNext()) {
+
+                String vertexKey = vertexKeys.next();
+
+
+                JSONArray vertexConnections = null;
+                ArrayList<Connection> mappingMapList = null;
+                long vertexId = Long.parseLong(vertexKey);
+                vertexConnections = planarGraphConnections.optJSONArray(vertexKey);
+                if (null == vertexConnections) {
+                    continue;
+                }
+                mappingMapList = new ArrayList<>();
+                mappingMap.put(vertexId, mappingMapList);
+                for (int i = 0; i < vertexConnections.length(); i++) {
+                    JSONObject rawConnection = vertexConnections.optJSONObject(i);
+                    if (null == rawConnection) {
+                        continue;
+                    }
+                    if (hashMap.get(rawConnection.optLong("id")) == null) {
+                        Connection connection = new Connection(
+                                rawConnection.optLong("mapId"),
+                                rawConnection.optString("direction"),
+                                rawConnection.optInt("rank"));
+
+                        connection.setId(rawConnection.optLong("id"));
+
+                        connection.setFrom(this.vertexList.get(rawConnection.optLong("from")));
+                        connection.setTo(this.vertexList.get(rawConnection.optLong("to")));
+                        connection.setCategoryId(rawConnection.optLong("categoryId"));
+                        hashMap.put(rawConnection.optLong("id"), connection);
+                        mappingMapList.add(connection);
+                    } else {
+                        Connection connection = hashMap.get(rawConnection.optLong("id"));
+                        mappingMapList.add(connection);
+                    }
+                }
+            }
+        }
+    }
+
+
+    public Quadtree queryQuadTree(long planarGraphId) {
+        return this._quadtreeMapping.get(planarGraphId);
+    }
+
+    public ArrayList<Path> queryPathsByVertex(Vertex vertex) {
+        HashMap<Long, ArrayList<Path>> paths = this._pathsMapping.get(vertex.getPlanarGraph());
+        return paths != null && paths.get(vertex.getId()) != null ? paths.get(vertex.getId()) : new ArrayList<Path>();
+    }
+
+    public ArrayList<Connection> queryConnectionsByVertex(Vertex vertex) {
+        HashMap<Long, ArrayList<Connection>> connections = this._connectionsMapping.get(vertex.getPlanarGraph());
+        return connections != null && connections.get(vertex.getId()) != null ? connections.get(vertex.getId()) : new ArrayList<Connection>();
+    }
+
+    public List queryAllPathFromIndex(long planarGraphId) {
+        Quadtree quadtree = this._quadtreeMapping.get(planarGraphId);
+        return quadtree != null ? quadtree.queryAll() : Collections.emptyList();
+    }
+
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/FeatureCollection.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/FeatureCollection.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/FeatureCollection.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,35 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class FeatureCollection<T extends Feature> implements Serializable {
-
-    private String type = "FeatureCollection";
-
-    private List<T> features = new ArrayList<>();
-
-    public String getType() {
-        return type;
-    }
-
-    public void setType(String type) {
-        this.type = type;
-    }
-
-    public void addFeature(T feature) {
-        features.add(feature);
-    }
-
-    public List<T> getFeatures() {
-        return features;
-    }
-
-    public void setFeatures(List<T> features) {
-        this.features = features;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/showroute/RouteManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/showroute/RouteManager.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/showroute/RouteManager.java	(revision )
@@ -13,7 +13,7 @@
 import com.mapbox.services.commons.geojson.FeatureCollection;
 import com.mapbox.services.commons.geojson.Point;
 import com.mapbox.services.commons.models.Position;
-import com.palmap.huayitonglib.navi.astar.navi.AStarPath;
+import com.palmap.astar.navi.AStarPath;
 import com.palmap.huayitonglib.navi.route.INavigateManager;
 import com.palmap.huayitonglib.navi.route.MapBoxNavigateManager;
 
Index: lib-astar/src/main/java/com/palmap/astar/navi/entity/Direction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/entity/Direction.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/entity/Direction.java	(revision )
@@ -0,0 +1,8 @@
+package com.palmap.astar.navi.entity;
+
+/**
+ * Created by wyx on 6/16/15.
+ */
+public enum Direction {
+    ONEWAY, TWOWAY
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Disjoint.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Disjoint.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Disjoint.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,16 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-import com.vividsolutions.jts.geom.Geometry;
-
-/**
- * Created by Administrator on 2017/12/1/001.
- */
-
-public class ST_Disjoint {
-    public ST_Disjoint() {
-    }
-
-    public static Boolean geomDisjoint(Geometry a, Geometry b) {
-        return a != null && b != null?Boolean.valueOf(a.disjoint(b)):null;
-    }
-}
Index: lib-astar/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/AndroidManifest.xml	(revision )
+++ lib-astar/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,2 @@
+<manifest package="com.palmap.astar">
+</manifest>
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/Region.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/Region.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/Region.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,36 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.region;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/8/16.
- */
-public class Region extends RegionKey implements Serializable {
-    private String name;
-    private FullRegion fullRegion;
-    private RegionType regionType;
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public FullRegion getFullRegion() {
-        return fullRegion;
-    }
-
-    public void setFullRegion(FullRegion fullRegion) {
-        this.fullRegion = fullRegion;
-    }
-
-    public RegionType getRegionType() {
-        return regionType;
-    }
-
-    public void setRegionType(RegionType regionType) {
-        this.regionType = regionType;
-    }
-}
Index: lib-astar/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/.gitignore	(revision )
+++ lib-astar/.gitignore	(revision )
@@ -0,0 +1,1 @@
+/build
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/FullRegion.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/FullRegion.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/region/FullRegion.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,83 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.region;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/8/10.
- */
-public class FullRegion implements Serializable {
-
-    private String countryCode;
-    private String countryName;
-    private Integer provinceCode;
-    private String provinceName;
-
-    public String getCountryCode() {
-        return countryCode;
-    }
-
-    public void setCountryCode(String countryCode) {
-        this.countryCode = countryCode;
-    }
-
-    public String getCountryName() {
-        return countryName;
-    }
-
-    public void setCountryName(String countryName) {
-        this.countryName = countryName;
-    }
-
-    public Integer getProvinceCode() {
-        return provinceCode;
-    }
-
-    public void setProvinceCode(Integer provinceCode) {
-        this.provinceCode = provinceCode;
-    }
-
-    public String getProvinceName() {
-        return provinceName;
-    }
-
-    public void setProvinceName(String provinceName) {
-        this.provinceName = provinceName;
-    }
-
-    public Integer getCityCode() {
-        return cityCode;
-    }
-
-    public void setCityCode(Integer cityCode) {
-        this.cityCode = cityCode;
-    }
-
-    public String getCityName() {
-        return cityName;
-    }
-
-    public void setCityName(String cityName) {
-        this.cityName = cityName;
-    }
-
-    public Integer getCountyCode() {
-        return countyCode;
-    }
-
-    public void setCountyCode(Integer countyCode) {
-        this.countyCode = countyCode;
-    }
-
-    public String getCountyName() {
-        return countyName;
-    }
-
-    public void setCountyName(String countyName) {
-        this.countyName = countyName;
-    }
-
-    private Integer cityCode;
-    private String cityName;
-    private Integer countyCode;
-    private String countyName;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DefaultH.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DefaultH.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DefaultH.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,11 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-/**
- * Created by wyx on 9/2/15.
- */
-public class DefaultH implements H {
-    @Override
-    public double H(AStarVertex current, AStarVertex target) {
-        return Math.abs(target.getVertex().getAltitude() - current.getVertex().getAltitude()) + current.getVertex().getShape().distance(target.getVertex().getShape());
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/geojson/GeoJsonConstants.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/geojson/GeoJsonConstants.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ lib-astar/src/main/java/com/palmap/astar/navi/geojson/GeoJsonConstants.java	(revision )
@@ -1,4 +1,4 @@
-package com.palmap.huayitonglib.navi.astar.geojson;
+package com.palmap.astar.navi.geojson;
 
 /**
  * Created by wtm on 2017/8/8.
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarPath.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarPath.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ lib-astar/src/main/java/com/palmap/astar/navi/AStarPath.java	(revision )
@@ -1,4 +1,4 @@
-package com.palmap.huayitonglib.navi.astar.navi;
+package com.palmap.astar.navi;
 
 /**
  * Created by wyx on 8/31/15.
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/POIDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/POIDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/POIDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,379 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import com.palmap.huayitonglib.navi.astar.model.Payment;
-import com.palmap.huayitonglib.navi.astar.model.Type;
-import com.vividsolutions.jts.geom.Geometry;
-
-import org.codehaus.jackson.annotate.JsonAnyGetter;
-import org.codehaus.jackson.annotate.JsonIgnore;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.annotate.JsonPropertyOrder;
-
-import java.io.Serializable;
-import java.util.Map;
-import java.util.Set;
-
-/**
- * Created by sifan on 2016/7/6.
- */
-@JsonPropertyOrder({ "id", "dataId", "version", "mapId", "buildingId", "planarGraphId" })
-public class POIDto extends BaseDto implements Serializable, Comparable<POIDto> {
-    private long id;
-    private Long parent;
-    private Set<Long> parents;
-    private String address;
-    private RegionDto region;
-
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public Long getParent() {
-        return parent;
-    }
-
-    public void setParent(Long parent) {
-        this.parent = parent;
-    }
-
-    public Set<Long> getParents() {
-        return parents;
-    }
-
-    public void setParents(Set<Long> parents) {
-        this.parents = parents;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    public RegionDto getRegion() {
-        return region;
-    }
-
-    public void setRegion(RegionDto region) {
-        this.region = region;
-    }
-
-    public Integer getZipCode() {
-        return zipCode;
-    }
-
-    public void setZipCode(Integer zipCode) {
-        this.zipCode = zipCode;
-    }
-
-    public Type getType() {
-        return type;
-    }
-
-    public void setType(Type type) {
-        this.type = type;
-    }
-
-    public Type getDetailType() {
-        return detailType;
-    }
-
-    public void setDetailType(Type detailType) {
-        this.detailType = detailType;
-    }
-
-    public Boolean getDefaultFloor() {
-        return defaultFloor;
-    }
-
-    public void setDefaultFloor(Boolean defaultFloor) {
-        this.defaultFloor = defaultFloor;
-    }
-
-    public Double getAltitude() {
-        return altitude;
-    }
-
-    public void setAltitude(Double altitude) {
-        this.altitude = altitude;
-    }
-
-    public CategoryDto getCategory() {
-        return category;
-    }
-
-    public void setCategory(CategoryDto category) {
-        this.category = category;
-    }
-
-    public Boolean getSpecialName() {
-        return specialName;
-    }
-
-    public void setSpecialName(Boolean specialName) {
-        this.specialName = specialName;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getEnglishName() {
-        return englishName;
-    }
-
-    public void setEnglishName(String englishName) {
-        this.englishName = englishName;
-    }
-
-    public String getDisplay() {
-        return display;
-    }
-
-    public void setDisplay(String display) {
-        this.display = display;
-    }
-
-    public String getLogo() {
-        return logo;
-    }
-
-    public void setLogo(String logo) {
-        this.logo = logo;
-    }
-
-    public Boolean getCommonArea() {
-        return commonArea;
-    }
-
-    public void setCommonArea(Boolean commonArea) {
-        this.commonArea = commonArea;
-    }
-
-    public String getPhone() {
-        return phone;
-    }
-
-    public void setPhone(String phone) {
-        this.phone = phone;
-    }
-
-    public Set<String> getTags() {
-        return tags;
-    }
-
-    public void setTags(Set<String> tags) {
-        this.tags = tags;
-    }
-
-    public Boolean getParking() {
-        return parking;
-    }
-
-    public void setParking(Boolean parking) {
-        this.parking = parking;
-    }
-
-    public Integer getParkingSpace() {
-        return parkingSpace;
-    }
-
-    public void setParkingSpace(Integer parkingSpace) {
-        this.parkingSpace = parkingSpace;
-    }
-
-    public String getParkingFee() {
-        return parkingFee;
-    }
-
-    public void setParkingFee(String parkingFee) {
-        this.parkingFee = parkingFee;
-    }
-
-    public Boolean getMembership() {
-        return membership;
-    }
-
-    public void setMembership(Boolean membership) {
-        this.membership = membership;
-    }
-
-    public String getOpeningTime() {
-        return openingTime;
-    }
-
-    public void setOpeningTime(String openingTime) {
-        this.openingTime = openingTime;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public Set<Payment> getPayments() {
-        return payments;
-    }
-
-    public void setPayments(Set<Payment> payments) {
-        this.payments = payments;
-    }
-
-    public Long getPlanarGraphId() {
-        return planarGraphId;
-    }
-
-    public void setPlanarGraphId(Long planarGraphId) {
-        this.planarGraphId = planarGraphId;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Long getBuildingId() {
-        return buildingId;
-    }
-
-    public void setBuildingId(Long buildingId) {
-        this.buildingId = buildingId;
-    }
-
-    public Integer getShapeLevel() {
-        return shapeLevel;
-    }
-
-    public void setShapeLevel(Integer shapeLevel) {
-        this.shapeLevel = shapeLevel;
-    }
-
-    public Long getRelatedBuildingId() {
-        return relatedBuildingId;
-    }
-
-    public void setRelatedBuildingId(Long relatedBuildingId) {
-        this.relatedBuildingId = relatedBuildingId;
-    }
-
-    public Long getAreaId() {
-        return areaId;
-    }
-
-    public void setAreaId(Long areaId) {
-        this.areaId = areaId;
-    }
-
-    public Set<Long> getDoorIds() {
-        return doorIds;
-    }
-
-    public void setDoorIds(Set<Long> doorIds) {
-        this.doorIds = doorIds;
-    }
-
-    public Geometry getShape() {
-        return shape;
-    }
-
-    public void setShape(Geometry shape) {
-        this.shape = shape;
-    }
-
-    public double[] getPoint() {
-        return point;
-    }
-
-    public void setPoint(double[] point) {
-        this.point = point;
-    }
-
-    public Set<String> getHighlights() {
-        return highlights;
-    }
-
-    public void setHighlights(Set<String> highlights) {
-        this.highlights = highlights;
-    }
-
-    public void setOther(Map<String, Object> other) {
-        this.other = other;
-    }
-
-    @JsonProperty("zip")
-    private Integer zipCode;
-    private Type type;
-    private Type detailType;
-    @JsonProperty("default")
-    private Boolean defaultFloor;
-    private Double altitude;
-    private CategoryDto category;
-    @JsonProperty("special_name")
-    private Boolean specialName;
-    private String name;
-    @JsonProperty("english_name")
-    private String englishName;
-    private String display;
-    private String logo;
-    @JsonProperty("common_area")
-    private Boolean commonArea;
-    private String phone;
-    private Set<String> tags;
-    private Boolean parking;
-    @JsonProperty("parking_space")
-    private Integer parkingSpace;
-    @JsonProperty("parking_fee")
-    private String parkingFee;
-    private Boolean membership;
-    @JsonProperty("opening_time")
-    private String openingTime;
-    private String description;
-    @JsonProperty("payment")
-    private Set<Payment> payments;
-
-    private Long planarGraphId;
-    private Long mapId;
-    private Long buildingId;
-    private Integer shapeLevel;
-    private Long relatedBuildingId;
-    private Long areaId;
-    private Set<Long> doorIds;
-    private Geometry shape;
-    private double[] point;
-
-    private Set<String> highlights;
-
-    @JsonIgnore
-    private Map<String, Object> other;
-
-    @JsonAnyGetter
-    public Map<String, Object> getOther() {
-        return other;
-    }
-
-    @Override
-    public int compareTo(POIDto poi) {
-        if (poi == null) return 1;
-        if (Type.FLOOR.equals(poi.getType())) {
-            return getAltitude() < poi.getAltitude() ? -1 : 1;
-        } else {
-            return 0;
-        }
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Areas.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Areas.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Areas.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,11 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-import com.palmap.huayitonglib.navi.astar.model.FeatureCollection;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class Areas extends FeatureCollection<Area> implements Serializable {
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/DaoMaster.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/DaoMaster.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/DaoMaster.java	(revision )
@@ -1,0 +1,0 @@
Index: lib-astar/src/main/java/com/palmap/astar/navi/DefaultG.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/DefaultG.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/DefaultG.java	(revision )
@@ -0,0 +1,18 @@
+package com.palmap.astar.navi;
+
+/**
+ * Created by wyx on 9/2/15.
+ */
+public class DefaultG implements G {
+    @Override
+    public double G(AStarVertex current, AStarPath path, boolean onSameFloor) {
+        if (path instanceof AStarLanePath)
+            return path.getWeight();
+        else if (path instanceof AStarConnectionPath) {
+            if(onSameFloor)
+                return 40;
+            return 20;
+        }
+        return 0;
+    }
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Lists.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Lists.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Lists.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,24 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-import java.util.ArrayList;
-import java.util.Collections;
-
-/**
- * Created by Administrator on 2017/12/1/001.
- */
-
-public class Lists {
-    private Lists() {
-    }
-
-    public static <E> ArrayList<E> newArrayList(E... elements) {
-        int capacity = computeArrayListCapacity(elements.length);
-        ArrayList list = new ArrayList(capacity);
-        Collections.addAll(list, elements);
-        return list;
-    }
-
-    static int computeArrayListCapacity(int arraySize) {
-        return Ints.saturatedCast(5L + (long) arraySize + (long) (arraySize / 10));
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Base.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Base.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Base.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,51 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model;
-
-
-import com.palmap.huayitonglib.navi.astar.Constants;
-
-import java.io.Serializable;
-
-/**
- * Created by liupin on 2017/8/20.
- */
-public abstract class Base implements Serializable {
-
-    private String dataId;
-    private String version;
-    private long sceneId = Constants.DEFAULT_SCENE;
-
-    public String getDataId() {
-        return dataId;
-    }
-
-    public void setDataId(String dataId) {
-        this.dataId = dataId;
-    }
-
-    public String getVersion() {
-        return version;
-    }
-
-    public void setVersion(String version) {
-        this.version = version;
-    }
-
-    public long getSceneId() {
-        return sceneId;
-    }
-
-    public void setSceneId(long sceneId) {
-        this.sceneId = sceneId;
-    }
-
-    public boolean isActive() {
-        return active;
-    }
-
-    public void setActive(boolean active) {
-        this.active = active;
-    }
-
-    private boolean active;
-
-}
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>GBK
===================================================================
--- settings.gradle	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ settings.gradle	(revision )
@@ -1,1 +1,1 @@
-include ':app', ':huayitonglib', ':demo'
+include ':app', ':huayitonglib', ':demo', ':lib-astar'
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/utils/GeometryUtils.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/utils/GeometryUtils.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/utils/GeometryUtils.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,89 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.utils;
-
-import com.palmap.huayitonglib.navi.astar.ST_Disjoint;
-import com.palmap.huayitonglib.navi.astar.ST_Snap;
-import com.palmap.huayitonglib.navi.astar.ST_Split;
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.LineString;
-import com.vividsolutions.jts.geom.MultiLineString;
-import com.vividsolutions.jts.geom.Point;
-import com.vividsolutions.jts.linearref.LengthIndexedLine;
-import com.vividsolutions.jts.operation.distance.DistanceOp;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by sifan on 2016/12/13.
- */
-public class GeometryUtils {
-
-    public static boolean disjoint(Geometry a, Geometry b, double tolerance) {
-        return ST_Disjoint.geomDisjoint(ST_Snap.snap(a, b, tolerance), b);
-    }
-
-    /**
-     * split line a and line b
-     *
-     * @param geometryA
-     * @param geometryB
-     * @return
-     */
-    public static List<Geometry> spilt(Geometry geometryA, Geometry geometryB) {
-        List<Geometry> splits = new ArrayList<>();
-        if (geometryA instanceof LineString || geometryA instanceof MultiLineString) {
-            if (geometryB instanceof Point) {
-                Geometry split = ST_Split.split(geometryA, geometryB);
-                splits.addAll(splitMultiLineString(split));
-                return splits;
-            }
-        }
-
-        Geometry intersection = geometryA.intersection(geometryB);
-        Geometry differenceA = geometryA.difference(geometryB);
-
-        if (intersection instanceof LineString || intersection instanceof MultiLineString) {
-            splits.addAll(splitMultiLineString(intersection));
-        }
-        splits.addAll(splitMultiLineString(differenceA));
-        return splits;
-    }
-
-    private static List<Geometry> splitMultiLineString(Geometry geometry) {
-        List<Geometry> splits = new ArrayList<>();
-        if (!geometry.isEmpty()) {
-            if (geometry instanceof LineString) {
-                splits.add(geometry);
-            } else if (geometry instanceof MultiLineString) {
-                for (int i = 0; i < geometry.getNumGeometries(); i++) {
-                    Geometry geometryN = geometry.getGeometryN(i);
-                    if (!geometryN.isEmpty()) {
-                        splits.add(geometryN);
-                    }
-                }
-            } else {
-                throw new RuntimeException("Unsupported collection " + geometry.toText());
-            }
-        }
-        return splits;
-    }
-
-    /**
-     * 找到点与线最近的坐标(投影)
-     *
-     * @param point
-     * @param line
-     * @return
-     */
-    public static Coordinate getProjectOnLine(Point point, LineString line) {
-        Coordinate project;
-        if (DistanceOp.distance(line, point) >= Double.MAX_VALUE) {
-            LengthIndexedLine lil = new LengthIndexedLine(line);
-            project = lil.extractPoint(line.getLength() / 2.0);
-        } else {
-            project = DistanceOp.nearestPoints(line, point)[0];
-        }
-        return project;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RoadDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RoadDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RoadDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,49 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import java.io.Serializable;
-import java.util.List;
-
-/**
- * Created by liupin on 2017/7/31.
- */
-public class RoadDto extends BaseDto implements Serializable {
-
-    private long mapId;
-    private long planarGraphId;
-
-    public long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(long mapId) {
-        this.mapId = mapId;
-    }
-
-    public long getPlanarGraphId() {
-        return planarGraphId;
-    }
-
-    public void setPlanarGraphId(long planarGraphId) {
-        this.planarGraphId = planarGraphId;
-    }
-
-    public List<VertexDto> getVertexes() {
-        return vertexes;
-    }
-
-    public void setVertexes(List<VertexDto> vertexes) {
-        this.vertexes = vertexes;
-    }
-
-    public List<PathDto> getPaths() {
-        return paths;
-    }
-
-    public void setPaths(List<PathDto> paths) {
-        this.paths = paths;
-    }
-
-    private List<VertexDto> vertexes;
-    private List<PathDto> paths;
-
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Constants.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Constants.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/Constants.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,8 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-/**
- * Created by wyx on 2/8/16.
- */
-public final class Constants {
-    public static final Long DEFAULT_SCENE = 0L;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DistancePath.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DistancePath.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/DistancePath.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,52 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-
-import com.palmap.huayitonglib.navi.astar.model.path.Path;
-
-/**
- * Created by Nick on 2016/8/17.
- */
-public class DistancePath {
-    private Double distance;
-    private Path path;
-
-    public DistancePath(Double distance, Path path) {
-        this.distance = distance;
-        this.path = path;
-    }
-
-    public Double getDistance() {
-        return distance;
-    }
-
-    public void setDistance(Double distance) {
-        this.distance = distance;
-    }
-
-    public Path getPath() {
-        return path;
-    }
-
-    public void setPath(Path path) {
-        this.path = path;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        DistancePath that = (DistancePath) o;
-
-        if (distance != null ? !distance.equals(that.distance) : that.distance != null) return false;
-        return path != null ? path.equals(that.path) : that.path == null;
-
-    }
-
-    @Override
-    public int hashCode() {
-        int result = distance != null ? distance.hashCode() : 0;
-        result = 31 * result + (path != null ? path.hashCode() : 0);
-        return result;
-    }
-}
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/RoadNet.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/RoadNet.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/RoadNet.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,46 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.path;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Created by Administrator on 2017/12/4/004.
- */
-
-public class RoadNet {
-    private long mapId;
-    private List<Vertex> vertexes;
-    private Map<Long, Map<Long, List<Path>>> paths;
-
-    public long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(long mapId) {
-        this.mapId = mapId;
-    }
-
-    public List<Vertex> getVertexes() {
-        return vertexes;
-    }
-
-    public void setVertexes(List<Vertex> vertexes) {
-        this.vertexes = vertexes;
-    }
-
-    public Map<Long, Map<Long, List<Path>>> getPaths() {
-        return paths;
-    }
-
-    public void setPaths(Map<Long, Map<Long, List<Path>>> paths) {
-        this.paths = paths;
-    }
-
-    public Map<Long, Map<Long, List<Connection>>> getConnections() {
-        return connections;
-    }
-
-    public void setConnections(Map<Long, Map<Long, List<Connection>>> connections) {
-        this.connections = connections;
-    }
-    private Map<Long, Map<Long, List<Connection>>> connections;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Vertex.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Vertex.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/path/Vertex.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,135 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.path;
-
-import com.vividsolutions.jts.geom.Geometry;
-
-import java.io.Serializable;
-
-/**
- * Created by Nick on 2016/8/17.
- */
-public class Vertex implements Serializable {
-
-    public Vertex() {}
-
-    public Vertex(Geometry geometry) {
-        this.shape = geometry;
-    }
-
-    public Vertex(long mapId,Geometry shape,long planarGraphId,double altitude) {
-        this.mapId = mapId;
-        this.shape = shape;
-        this.planarGraphId = planarGraphId;
-        this.altitude = altitude;
-    }
-
-    private Long id;
-    private Long mapId;
-    private Geometry shape;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Geometry getShape() {
-        return shape;
-    }
-
-    public void setShape(Geometry shape) {
-        this.shape = shape;
-    }
-
-    public Long getPlanarGraphId() {
-        return planarGraphId;
-    }
-
-    public void setPlanarGraphId(Long planarGraphId) {
-        this.planarGraphId = planarGraphId;
-    }
-
-    public Double getAltitude() {
-        return altitude;
-    }
-
-    public void setAltitude(Double altitude) {
-        this.altitude = altitude;
-    }
-
-    public Boolean getVirtual() {
-        return virtual;
-    }
-
-    public void setVirtual(Boolean virtual) {
-        this.virtual = virtual;
-    }
-
-    public String getNodeId() {
-        return nodeId;
-    }
-
-    public void setNodeId(String nodeId) {
-        this.nodeId = nodeId;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public Long getDoorId() {
-        return doorId;
-    }
-
-    public void setDoorId(Long doorId) {
-        this.doorId = doorId;
-    }
-
-    public Long getEscalatorId() {
-        return escalatorId;
-    }
-
-    public void setEscalatorId(Long escalatorId) {
-        this.escalatorId = escalatorId;
-    }
-
-    public Long getPublicServiceId() {
-        return publicServiceId;
-    }
-
-    public void setPublicServiceId(Long publicServiceId) {
-        this.publicServiceId = publicServiceId;
-    }
-
-    public boolean isFacility() {
-        return facility;
-    }
-
-    public void setFacility(boolean facility) {
-        this.facility = facility;
-    }
-
-    private Long planarGraphId;
-    private Double altitude;
-    private Boolean virtual;
-    private String nodeId;
-    private String name;
-    private Long doorId;
-    private Long escalatorId;
-    private Long publicServiceId;
-    private boolean facility;
-
-}
Index: lib-astar/src/main/java/com/palmap/astar/navi/H.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/H.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/H.java	(revision )
@@ -0,0 +1,12 @@
+/**
+ * 
+ */
+package com.palmap.astar.navi;
+
+/**
+ * @author Vito Zheng
+ *
+ */
+public interface H {
+  double H(AStarVertex current, AStarVertex target);
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarConnectionPath.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarConnectionPath.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ lib-astar/src/main/java/com/palmap/astar/navi/AStarConnectionPath.java	(revision )
@@ -1,7 +1,7 @@
-package com.palmap.huayitonglib.navi.astar.navi;
+package com.palmap.astar.navi;
 
 
-import com.palmap.huayitonglib.navi.astar.model.path.Connection;
+import com.palmap.astar.navi.entity.Connection;
 
 /**
  * Created by wyx on 8/31/15.
@@ -16,10 +16,6 @@
             from = new AStarVertex(connection.getFrom(), loader);
             to = new AStarVertex(connection.getTo(), loader);
         } else {
-            Long fromLocationId = connection.getFromLocationId();
-            Long toLocationId = connection.getToLocationId();
-            connection.setFromLocationId(toLocationId);
-            connection.setToLocationId(fromLocationId);
             from = new AStarVertex(connection.getTo(), loader);
             to = new AStarVertex(connection.getFrom(), loader);
         }
@@ -32,10 +28,6 @@
 
     @Override
     public double getAltitude() {
-        return getTo().getVertex().getAltitude();
-    }
-
-    public Connection getConnection() {
-        return this.connection;
+        return 0;
     }
 }
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarLanePath.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarLanePath.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ lib-astar/src/main/java/com/palmap/astar/navi/AStarLanePath.java	(revision )
@@ -1,7 +1,7 @@
-package com.palmap.huayitonglib.navi.astar.navi;
+package com.palmap.astar.navi;
 
 
-import com.palmap.huayitonglib.navi.astar.model.path.Path;
+import com.palmap.astar.navi.entity.Path;
 
 /**
  * Created by wyx on 8/31/15.
@@ -33,7 +33,7 @@
 
     @Override
     public double getAltitude() {
-        return path.getAltitude();
+        return 0;
     }
 
     @Override
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Map.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Map.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Map.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,253 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model;
-
-import com.palmap.huayitonglib.navi.astar.model.category.Category;
-import com.palmap.huayitonglib.navi.astar.model.region.Region;
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.Geometry;
-
-import org.codehaus.jackson.annotate.JsonProperty;
-
-import java.io.Serializable;
-import java.util.Set;
-
-/**
- * Created by wyx on 1/18/16.
- */
-public class Map extends Base implements Serializable {
-    private long id;
-    private Boolean specialName;
-    private String display;
-    private String name;
-
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public Boolean getSpecialName() {
-        return specialName;
-    }
-
-    public void setSpecialName(Boolean specialName) {
-        this.specialName = specialName;
-    }
-
-    public String getDisplay() {
-        return display;
-    }
-
-    public void setDisplay(String display) {
-        this.display = display;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getEnglishName() {
-        return englishName;
-    }
-
-    public void setEnglishName(String englishName) {
-        this.englishName = englishName;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    public Region getRegion() {
-        return region;
-    }
-
-    public void setRegion(Region region) {
-        this.region = region;
-    }
-
-    public Category getCategory() {
-        return category;
-    }
-
-    public void setCategory(Category category) {
-        this.category = category;
-    }
-
-    public String getLogo() {
-        return logo;
-    }
-
-    public void setLogo(String logo) {
-        this.logo = logo;
-    }
-
-    public Boolean getParking() {
-        return parking;
-    }
-
-    public void setParking(Boolean parking) {
-        this.parking = parking;
-    }
-
-    public Integer getParkingSpace() {
-        return parkingSpace;
-    }
-
-    public void setParkingSpace(Integer parkingSpace) {
-        this.parkingSpace = parkingSpace;
-    }
-
-    public String getParkingFee() {
-        return parkingFee;
-    }
-
-    public void setParkingFee(String parkingFee) {
-        this.parkingFee = parkingFee;
-    }
-
-    public String getPhone() {
-        return phone;
-    }
-
-    public void setPhone(String phone) {
-        this.phone = phone;
-    }
-
-    public Boolean getMembership() {
-        return membership;
-    }
-
-    public void setMembership(Boolean membership) {
-        this.membership = membership;
-    }
-
-    public String getOpeningTime() {
-        return openingTime;
-    }
-
-    public void setOpeningTime(String openingTime) {
-        this.openingTime = openingTime;
-    }
-
-    public Integer getZipCode() {
-        return zipCode;
-    }
-
-    public void setZipCode(Integer zipCode) {
-        this.zipCode = zipCode;
-    }
-
-    public Set<String> getTags() {
-        return tags;
-    }
-
-    public void setTags(Set<String> tags) {
-        this.tags = tags;
-    }
-
-    public Set<Long> getPayments() {
-        return payments;
-    }
-
-    public void setPayments(Set<Long> payments) {
-        this.payments = payments;
-    }
-
-    public long getPoi() {
-        return poi;
-    }
-
-    public void setPoi(long poi) {
-        this.poi = poi;
-    }
-
-    public Boolean getPrivatelyOwned() {
-        return privatelyOwned;
-    }
-
-    public void setPrivatelyOwned(Boolean privatelyOwned) {
-        this.privatelyOwned = privatelyOwned;
-    }
-
-    public Coordinate getCoordinate() {
-        return coordinate;
-    }
-
-    public void setCoordinate(Coordinate coordinate) {
-        this.coordinate = coordinate;
-    }
-
-    public Geometry getAngleLine() {
-        return angleLine;
-    }
-
-    public void setAngleLine(Geometry angleLine) {
-        this.angleLine = angleLine;
-    }
-
-    public boolean isMultiBuilding() {
-        return multiBuilding;
-    }
-
-    public void setMultiBuilding(boolean multiBuilding) {
-        this.multiBuilding = multiBuilding;
-    }
-
-    public Set<Long> getOwner() {
-        return owner;
-    }
-
-    public void setOwner(Set<Long> owner) {
-        this.owner = owner;
-    }
-
-    public Long getCreateTime() {
-        return createTime;
-    }
-
-    public void setCreateTime(Long createTime) {
-        this.createTime = createTime;
-    }
-
-    public Long getLastModify() {
-        return lastModify;
-    }
-
-    public void setLastModify(Long lastModify) {
-        this.lastModify = lastModify;
-    }
-
-    private String englishName;
-    private String address;
-    private Region region;
-    private Category category;
-    private String logo;
-    private Boolean parking;
-    private Integer parkingSpace;
-    private String parkingFee;
-    private String phone;
-    private Boolean membership;
-    private String openingTime;
-    private Integer zipCode;
-    private Set<String> tags;
-    private Set<Long> payments;
-    private long poi;
-    private Boolean privatelyOwned;
-    private Coordinate coordinate;
-    private Geometry angleLine;
-    private boolean multiBuilding;
-    @JsonProperty("user_id")
-    private Set<Long> owner;
-    private Long createTime;
-    private Long lastModify;
-}
Index: lib-astar/src/main/java/com/palmap/astar/navi/DefaultH.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/DefaultH.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/DefaultH.java	(revision )
@@ -0,0 +1,13 @@
+package com.palmap.astar.navi;
+
+/**
+ * Created by wyx on 9/2/15.
+ */
+public class DefaultH implements H {
+    @Override
+    public double H(AStarVertex current, AStarVertex target) {
+        return Math.abs(target.getVertex().getAltitude()
+                - current.getVertex().getAltitude())
+                + current.getVertex().getShape().distance(target.getVertex().getShape());
+    }
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/route/INavigateManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/route/INavigateManager.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/route/INavigateManager.java	(revision )
@@ -1,7 +1,7 @@
 package com.palmap.huayitonglib.navi.route;
 
 import com.mapbox.services.commons.geojson.FeatureCollection;
-import com.palmap.huayitonglib.navi.astar.navi.AStarPath;
+import com.palmap.astar.navi.AStarPath;
 import com.vividsolutions.jts.geom.Coordinate;
 
 import java.util.List;
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStar.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStar.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStar.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,435 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-import com.palmap.huayitonglib.navi.astar.GeometryFactories;
-import com.palmap.huayitonglib.navi.astar.Lists;
-import com.palmap.huayitonglib.navi.astar.model.PoiInfo;
-import com.palmap.huayitonglib.navi.astar.model.path.Path;
-import com.palmap.huayitonglib.navi.astar.model.path.Vertex;
-import com.palmap.huayitonglib.navi.astar.utils.GeometryUtils;
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.geom.LineString;
-import com.vividsolutions.jts.geom.Point;
-import com.vividsolutions.jts.geom.impl.CoordinateArraySequence;
-import com.vividsolutions.jts.operation.distance.DistanceOp;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.PriorityQueue;
-
-
-/**
- * @author Vito Zheng
- */
-public class AStar {
-    private VertexLoader vertexLoader;
-    private final G g;
-    private final H h;
-
-    public AStar(G g, H h, VertexLoader vertexLoader) {
-        this.g = g;
-        this.h = h;
-        this.vertexLoader = vertexLoader;
-    }
-
-    public List<AStarPath> astar(Point from, long fromPlanarGraphId, Point to, long toPlanarGraphId, double
-            floorHeightDiff) {
-        return astar(from, fromPlanarGraphId, null, to, toPlanarGraphId, null, floorHeightDiff);
-    }
-
-    public List<AStarPath> astar(Point from, long fromPlanarGraphId, PoiInfo fromArea, Point to, long
-            toPlanarGraphId, PoiInfo toArea, double floorHeightDiff) {
-        List<AStarPath> paths = new ArrayList<>();
-        if (DistanceOp.distance(from, to) < NaviConstants.TOLERANCE) {
-            return paths;
-        }
-
-        PriorityQueue<AStarVertex> openList = new PriorityQueue<>();
-        HashSet<AStarVertex> closeList = new HashSet<>();
-
-        AStarVertex start = null;
-        AStarVertex end = null;
-        if (fromArea != null && !vertexLoader.checkAreaHavePaths(fromArea, from)) {
-            start = vertexLoader.genVertexOnArea(from, fromArea);
-        }
-
-        if (toArea != null && !vertexLoader.checkAreaHavePaths(toArea, to)) {
-            end = vertexLoader.genVertexOnArea(to, toArea);
-        }
-
-        Path fromNearestPath = null;
-        Path toNearestPath = null;
-        if (start == null) {
-            // 找起始点/终点最近的路网
-            fromNearestPath = vertexLoader.findNearestPath(from, fromPlanarGraphId);
-            // 以起始点/终点在最近路网的投影将路网分割，加入到此次路算中。并生成AstarVertex
-            start = vertexLoader.genVertexOnNearestPath(from, fromNearestPath);
-        }
-
-        if (end == null) {
-            // 找起始点/终点最近的路网
-            toNearestPath = vertexLoader.findNearestPath(to, toPlanarGraphId);
-            // 以起始点/终点在最近路网的投影将路网分割，加入到此次路算中。并生成AstarVertex
-            end = vertexLoader.genVertexOnNearestPath(to, toNearestPath);
-        }
-
-        if (start == null || end == null) {
-            return Collections.emptyList();
-        }
-
-        // 起点终点在同一条路网，直接相连
-        if (fromNearestPath != null && toNearestPath != null && fromNearestPath.equals(toNearestPath)) {
-            AStarLanePath aStarLanePath = genPathForSameNearst(start.getVertex(), end.getVertex(), fromNearestPath);
-            if (aStarLanePath != null) {
-                paths.add(aStarLanePath);
-            }
-            return paths;
-        }
-        // A* 寻路算法：  需要两个列表  Open： 所有被考虑来寻找最短路径的节点   Closed：不被考虑的路节点
-        if (!start.equals(end)) {
-            openList.offer(start);
-            AStarVertex current;
-            ret:
-            while (openList.size() > 0) {
-                current = openList.poll();
-                closeList.add(current);
-                List<AStarPath> mPaths = current.getPaths();
-                for (AStarPath path : mPaths) {
-                    AStarVertex vertex = path.getTo();
-                    if (closeList.contains(vertex)) {
-                        continue;
-                    }
-                    // 路径增量  每一条路网  G + H 的值
-                    // 在同一楼层联通设施G  40  否则 20
-                    // AStarLanePath  G 为 weight  即 path.getShape().getLength() * (path.getRank() + 1)
-                    double g = this.g.G(vertex, path, floorHeightDiff) + current.getG();   // G （开始到当前的移动量）
-                    double h = this.h.H(vertex, end);                                  // H 当前到目标的移动量估值  暂时为高度差与距离差的和
-                    if (openList.contains(vertex)) {
-                        AStarVertex[] vertices = openList.toArray(new AStarVertex[openList.size()]);
-                        ArrayList<AStarVertex> starVertices = Lists.newArrayList(vertices);
-                        int i = starVertices.indexOf(vertex);
-                        AStarVertex aStarVertex = starVertices.get(i);
-
-                        if (g + h < aStarVertex.getG() + aStarVertex.getH()) {
-                            vertex.setG(g);
-                            vertex.setH(h);
-                            vertex.setParent(current);
-                            openList.remove(vertex);
-                            openList.add(vertex);
-                        }
-                    } else {
-                        vertex.setG(g);
-                        vertex.setH(h);
-                        vertex.setParent(current);
-                        openList.add(vertex);
-                    }
-                    if (vertex.equals(end)) {
-                        do {
-                            paths.add(vertex.getParent().findPath(vertex));
-                            vertex = vertex.getParent();
-                        } while (!vertex.equals(start));
-                        break ret;
-                    }
-                }
-            }
-        }
-        Collections.reverse(paths);
-        filterExtraPath(paths);
-        paths = splitPaths(paths);
-        paths = combineCollinear(paths);
-        return paths;
-    }
-
-    /**
-     * 起点终点在同一条路网，直接相连
-     *
-     * @param from       起点投影
-     * @param to         终点投影
-     * @param nearstPath 最近的路网
-     * @return
-     */
-    private AStarLanePath genPathForSameNearst(Vertex from, Vertex to, Path nearstPath) {
-        // 如果起始点终点投影在同一条路网上，将路网分成三段，取出中间一段即为要返回的路径
-        // 1. 起点投影将路径分为两段
-        Point startPoint = (Point) from.getShape();
-        Point endPoint = (Point) to.getShape();
-        List<Geometry> startSpilt = GeometryUtils.spilt(nearstPath.getShape(), startPoint);
-        // 2. 取出分割的第二段再用终点投影分割得到的第一段
-        List<Geometry> endSpilt = GeometryUtils.spilt(startSpilt.get(0), endPoint);
-        if (endSpilt.isEmpty()) {
-            endSpilt = GeometryUtils.spilt(startSpilt.get(1), endPoint);
-        }
-        LineString lineString = null;
-        for (Geometry geometry : endSpilt) {
-            LineString line = (LineString) geometry;
-            if (line.getStartPoint().distance(startPoint) < NaviConstants.TOLERANCE && line.getEndPoint().distance
-                    (endPoint) < NaviConstants.TOLERANCE) {
-                lineString = line;
-            } else if (line.getEndPoint().distance(startPoint) < NaviConstants.TOLERANCE && line.getStartPoint()
-                    .distance(endPoint) < NaviConstants.TOLERANCE) {
-                lineString = (LineString) line.reverse();
-            }
-        }
-        if (lineString == null) return null;
-        Path path = vertexLoader.genNewPath(from, to, nearstPath, lineString);
-        return new AStarLanePath(path, vertexLoader, false);
-    }
-
-    /**
-     * 处理可以直接相连的路径（相邻路径在同一直线上的）
-     *
-     * @param paths
-     * @return
-     */
-    private List<AStarPath> combineCollinear(List<AStarPath> paths) {
-        int size = paths.size();
-        if (size < 2) {
-            return paths;
-        }
-        if (!hasCanCombined(paths)) {
-            return paths;
-        }
-        List<AStarPath> newPaths = new ArrayList<>();
-        for (int i = 0; i < size; i++) {
-            if (i >= paths.size()) {
-                break;
-            }
-
-            AStarPath path1 = paths.get(i);
-            if (i == paths.size() - 1) {
-                newPaths.add(path1);
-                break;
-            }
-            if (path1 instanceof AStarConnectionPath) {
-                newPaths.add(path1);
-                continue;
-            }
-            AStarPath path2 = paths.get(i + 1);
-            if (path2 instanceof AStarConnectionPath) {
-                newPaths.add(path1);
-                continue;
-            }
-            if (checkIfCanCombine((AStarLanePath) path1, (AStarLanePath) path2)) {
-                AStarLanePath newPath = combineTwoPaths((AStarLanePath) path1, (AStarLanePath) path2);
-                newPath.from = path1.from;
-                newPath.to = path2.to;
-                newPaths.add(newPath);
-                paths.remove(path2);
-            } else {
-                newPaths.add(path1);
-            }
-        }
-        return combineCollinear(newPaths);
-    }
-
-    /**
-     * 检查是否有可以连接起来的路径
-     *
-     * @param paths
-     * @return
-     */
-    private boolean hasCanCombined(List<AStarPath> paths) {
-        for (int i = 0; i < paths.size() - 1; i++) {
-            AStarPath path1 = paths.get(i);
-            if (path1 instanceof AStarConnectionPath) {
-                continue;
-            }
-            AStarPath path2 = paths.get(i + 1);
-            if (path2 instanceof AStarConnectionPath) {
-                continue;
-            }
-            if (checkIfCanCombine((AStarLanePath) path1, (AStarLanePath) path2)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    private AStarLanePath combineTwoPaths(AStarLanePath path1, AStarLanePath path2) {
-        Path path = new Path();
-        path.setId(path1.getPath().getId());
-        path.setPlanarGraphId(path1.getPath().getPlanarGraphId());
-        path.setMapId(path1.getPath().getMapId());
-        path.setFrom(path1.getFrom().getVertex());
-        path.setTo(path2.getTo().getVertex());
-        LineString shape1 = (LineString) path1.getPath().getShape().clone();
-        LineString shape2 = (LineString) path2.getPath().getShape().clone();
-        if (path1.isReverse() != path2.isReverse()) {
-            shape2 = (LineString) shape2.reverse();
-        }
-        LineString shape = mergeTwoLineString(shape1, shape2, path1.isReverse());
-        path.setShape(shape);
-        return new AStarLanePath(path, this.vertexLoader, path1.isReverse());
-    }
-
-    private LineString mergeTwoLineString(LineString shape1, LineString shape2, boolean reverse) {
-        LineString lineString;
-        if (reverse) {
-            lineString = GeometryFactories.pseudoMercator().createLineString(new CoordinateArraySequence(
-                    new Coordinate[]{shape2.getStartPoint().getCoordinate(), shape1.getEndPoint().getCoordinate()}));
-        } else {
-            lineString = GeometryFactories.pseudoMercator().createLineString(new CoordinateArraySequence(
-                    new Coordinate[]{shape1.getStartPoint().getCoordinate(), shape2.getEndPoint().getCoordinate()}));
-        }
-        return lineString;
-    }
-
-    /**
-     * 检查两条路径是否可以连接
-     *
-     * @param path1
-     * @param path2
-     * @return
-     */
-    private boolean checkIfCanCombine(AStarLanePath path1, AStarLanePath path2) {
-        if (!path1.getPath().getPlanarGraphId().equals(path2.getPath().getPlanarGraphId())) {
-            return false;
-        }
-        if (checkIfMultiPoints(path1) || checkIfMultiPoints(path2)) {
-            return false;
-        }
-//        if(DistanceOp.distance(path1.getPath().getShape().getEndPoint(),path2.getPath().getShape().getStartPoint())
-// > OFFSET)
-//            return false;
-        return checkIfCollinear(path1, path2);
-    }
-
-    /**
-     * 检查两条路径是否在一直线上
-     *
-     * @param path1
-     * @param path2
-     * @return
-     */
-    private boolean checkIfCollinear(AStarLanePath path1, AStarLanePath path2) {
-        double slope1 = getSlope(path1);
-        double slope2 = getSlope(path2);
-        if (Double.isInfinite(slope1) && Double.isInfinite(slope2)) {
-            return true;
-        }
-        double arctan1 = Math.atan(slope1);
-        double acrtan2 = Math.atan(slope2);
-        return (Math.abs(acrtan2 - arctan1) < 0.05) || (Math.PI - Math.abs(acrtan2 - arctan1) < 0.05);
-    }
-
-    /**
-     * 获取路径斜率
-     *
-     * @param path
-     * @return
-     */
-    private double getSlope(AStarLanePath path) {
-        LineString shape = (LineString) path.getPath().getShape();
-        double x1 = shape.getStartPoint().getX();
-        double y1 = shape.getStartPoint().getY();
-        double x2 = shape.getEndPoint().getX();
-        double y2 = shape.getEndPoint().getY();
-        return (y2 - y1) / (x2 - x1);
-    }
-
-    private boolean checkIfMultiPoints(AStarLanePath path) {
-        return path.getPath().getShape().getCoordinates().length > 2;
-    }
-
-    /**
-     * 去除辅助导航的路网
-     *
-     * @param paths
-     */
-    private void filterExtraPath(List<AStarPath> paths) {
-        if (paths == null || paths.size() == 0) {
-            return;
-        }
-        AStarPath first = paths.get(0);
-        AStarPath last = null;
-        if (paths.size() > 1) {
-            last = paths.get(paths.size() - 1);
-        }
-        checkThenRemove(paths, first);
-        checkThenRemove(paths, last);
-    }
-
-    private void checkThenRemove(List<AStarPath> paths, AStarPath path) {
-        if (path == null) {
-            return;
-        }
-        if (path instanceof AStarLanePath) {
-            int firstNodeRank = ((AStarLanePath) path).getPath().getRank();
-            if (firstNodeRank == 10) {
-                paths.remove(path);
-            }
-        }
-    }
-
-    private List<AStarPath> splitPaths(List<AStarPath> paths) {
-        List<AStarPath> aStarPaths = new ArrayList<>();
-        for (AStarPath path : paths) {
-            if (path instanceof AStarLanePath) {
-                aStarPaths.addAll(splitPath((AStarLanePath) path));
-            } else {
-                aStarPaths.add(path);
-            }
-        }
-        return aStarPaths;
-    }
-
-    private List<AStarLanePath> splitPath(AStarLanePath aStarLanePath) {
-        List<AStarLanePath> aStarPaths = new ArrayList<>();
-        LineString pathLineString = (LineString) aStarLanePath.getPath().getShape().clone();
-        int count = aStarLanePath.getPath().getShape().getCoordinates().length;
-        if (count > 2) {
-            if (!aStarLanePath.isReverse()) {
-                for (int i = 0; i < count - 1; i++) {
-                    LineString lineString = GeometryFactories.pseudoMercator().createLineString(new
-                            CoordinateArraySequence(
-                            new Coordinate[]{pathLineString.getPointN(i).getCoordinate(), pathLineString.getPointN(i
-                                    + 1).getCoordinate()}));
-                    Path path = new Path();
-                    long planarGraphId = aStarLanePath.getFrom().getVertex().getPlanarGraphId();
-                    path.setId(aStarLanePath.getPath().getId());
-                    Vertex fromVertex = new Vertex();
-                    Vertex toVertex = new Vertex();
-                    fromVertex.setShape(pathLineString.getPointN(i));
-                    fromVertex.setPlanarGraphId(planarGraphId);
-                    toVertex.setShape(pathLineString.getPointN(i + 1));
-                    toVertex.setPlanarGraphId(planarGraphId);
-                    path.setFrom(fromVertex);
-                    path.setTo(toVertex);
-                    path.setPlanarGraphId(aStarLanePath.getPath().getPlanarGraphId());
-                    path.setMapId(aStarLanePath.getPath().getMapId());
-                    path.setShape(lineString);
-                    aStarPaths.add(new AStarLanePath(path, this.vertexLoader, false));
-                }
-            } else {
-                for (int i = count - 1; i > 0; i--) {
-                    LineString lineString = GeometryFactories.pseudoMercator().createLineString(new
-                            CoordinateArraySequence(
-                            new Coordinate[]{pathLineString.getPointN(i).getCoordinate(), pathLineString.getPointN(i
-                                    - 1).getCoordinate()}));
-                    Path path = new Path();
-                    long planarGraphId = aStarLanePath.getFrom().getVertex().getPlanarGraphId();
-                    path.setId(aStarLanePath.getPath().getId());
-                    Vertex fromVertex = new Vertex();
-                    Vertex toVertex = new Vertex();
-                    fromVertex.setShape(pathLineString.getPointN(i));
-                    fromVertex.setPlanarGraphId(planarGraphId);
-                    toVertex.setShape(pathLineString.getPointN(i - 1));
-                    toVertex.setPlanarGraphId(planarGraphId);
-                    path.setFrom(fromVertex);
-                    path.setTo(toVertex);
-                    path.setPlanarGraphId(aStarLanePath.getPath().getPlanarGraphId());
-                    path.setMapId(aStarLanePath.getPath().getMapId());
-                    aStarLanePath.getFrom().getVertex().getShape();
-                    path.setShape(lineString);
-                    aStarPaths.add(new AStarLanePath(path, this.vertexLoader, false));
-                }
-            }
-            return aStarPaths;
-        } else {
-            aStarPaths.add(aStarLanePath);
-            return aStarPaths;
-        }
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Payment.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Payment.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Payment.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,54 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 1/18/16.
- */
-public class Payment implements Serializable {
-    private long id;
-    private String name;
-
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        Payment payment = (Payment) o;
-
-        if (id != payment.id) return false;
-        return name != null ? name.equals(payment.name) : payment.name == null;
-
-    }
-
-    @Override
-    public int hashCode() {
-        int result = (int) (id ^ (id >>> 32));
-        result = 31 * result + (name != null ? name.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "Payment{" +
-                "id=" + id +
-                ", name='" + name + '\'' +
-                '}';
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Feature.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Feature.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/Feature.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,71 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model;
-
-import com.vividsolutions.jts.geom.Geometry;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class Feature implements Serializable {
-
-    private String type = "Feature";
-    private Map<String, Object> properties = new HashMap<String, Object>();
-    private Geometry geometry;
-
-    public void setProperty(String key, Object value) {
-        properties.put(key, value);
-    }
-
-    @JsonIgnore
-    @SuppressWarnings("unchecked")
-    public <T> T getProperty(String key) {
-        return (T) properties.get(key);
-    }
-
-    @JsonIgnore
-    public Long getLongProperty(String key) {
-        return getProperty(key) == null ? null : Long.valueOf(getProperty(key).toString());
-    }
-
-    public Map<String, Object> getProperties() {
-        return properties;
-    }
-
-    public Geometry getGeometry() {
-        return geometry;
-    }
-
-    public void setGeometry(Geometry geometry) {
-        this.geometry = geometry;
-    }
-
-    public Long getId() {
-        return getLongProperty("id");
-    }
-
-    public void setId(long id) {
-        setProperty("id", id);
-    }
-
-    public String getType() {
-        return type;
-    }
-
-    public void setType(String type) {
-        this.type = type;
-    }
-
-    @JsonIgnore
-    public Integer getShapeLevel() {
-        return getProperty("shape_level");
-    }
-
-    public void setShapeLevel(Integer shapeLevel) {
-        setProperty("shape_level", shapeLevel);
-    }
-}
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/PathDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/PathDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/PathDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,123 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import com.palmap.huayitonglib.navi.astar.model.path.Direction;
-import com.vividsolutions.jts.geom.Geometry;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/12/17.
- */
-public class PathDto implements Serializable {
-
-    private Long id;
-    private Long mapId;
-    private Integer rank;
-    private Direction direction;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Integer getRank() {
-        return rank;
-    }
-
-    public void setRank(Integer rank) {
-        this.rank = rank;
-    }
-
-    public Direction getDirection() {
-        return direction;
-    }
-
-    public void setDirection(Direction direction) {
-        this.direction = direction;
-    }
-
-    public Geometry getShape() {
-        return shape;
-    }
-
-    public void setShape(Geometry shape) {
-        this.shape = shape;
-    }
-
-    public Long getFrom() {
-        return from;
-    }
-
-    public void setFrom(Long from) {
-        this.from = from;
-    }
-
-    public Long getTo() {
-        return to;
-    }
-
-    public void setTo(Long to) {
-        this.to = to;
-    }
-
-    public Long getPlanarGraphId() {
-        return planarGraphId;
-    }
-
-    public void setPlanarGraphId(Long planarGraphId) {
-        this.planarGraphId = planarGraphId;
-    }
-
-    public Double getAltitude() {
-        return altitude;
-    }
-
-    public void setAltitude(Double altitude) {
-        this.altitude = altitude;
-    }
-
-    public Long getPathId() {
-        return pathId;
-    }
-
-    public void setPathId(Long pathId) {
-        this.pathId = pathId;
-    }
-
-    public Long getFromLocationId() {
-        return fromLocationId;
-    }
-
-    public void setFromLocationId(Long fromLocationId) {
-        this.fromLocationId = fromLocationId;
-    }
-
-    public Long getToLocationId() {
-        return toLocationId;
-    }
-
-    public void setToLocationId(Long toLocationId) {
-        this.toLocationId = toLocationId;
-    }
-
-    private Geometry shape;
-    private Long from;
-    private Long to;
-    private Long planarGraphId;
-    private Double altitude;
-    private Long pathId;
-    private Long fromLocationId;
-    private Long toLocationId;
-
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/FullMapDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/FullMapDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/FullMapDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,66 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.List;
-
-
-/**
- * Created by liupin on 2017/7/28.
- */
-public class FullMapDto implements Serializable {
-
-    private MapDto map;
-    private RoadNetDto roadNet;
-    private List<PlanarGraphDto> planarGraphs;
-    private List<POIDto> pois;
-
-    public MapDto getMap() {
-        return map;
-    }
-
-    public void setMap(MapDto map) {
-        this.map = map;
-    }
-
-    public RoadNetDto getRoadNet() {
-        return roadNet;
-    }
-
-    public void setRoadNet(RoadNetDto roadNet) {
-        this.roadNet = roadNet;
-    }
-
-    public List<PlanarGraphDto> getPlanarGraphs() {
-        return planarGraphs;
-    }
-
-    public void setPlanarGraphs(List<PlanarGraphDto> planarGraphs) {
-        this.planarGraphs = planarGraphs;
-    }
-
-    public List<POIDto> getPois() {
-        return pois;
-    }
-
-    public void setPois(List<POIDto> pois) {
-        this.pois = pois;
-    }
-
-    public FullMapDto addPOI(POIDto poi) {
-        if (pois == null) {
-            pois = new ArrayList<>();
-        }
-        pois.add(poi);
-        return this;
-    }
-
-    public FullMapDto addPlanarGraph(PlanarGraphDto planarGraph) {
-        if (planarGraphs == null) {
-            planarGraphs = new ArrayList<>();
-        }
-        planarGraphs.add(planarGraph);
-        return this;
-    }
-
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/MapPointInfoBeanDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/MapPointInfoBeanDao.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/db/gen/MapPointInfoBeanDao.java	(revision )
@@ -1,0 +1,0 @@
Index: lib-astar/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/build.gradle	(revision )
+++ lib-astar/build.gradle	(revision )
@@ -0,0 +1,26 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "26.0.0"
+
+    defaultConfig {
+        minSdkVersion 16
+        targetSdkVersion 25
+        versionCode 1
+        versionName "1.0"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    //compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile files('libs/json-simple-1.1.jar')
+    provided files('libs/jts-1.13.jar')
+}
Index: lib-astar/src/main/java/com/palmap/astar/navi/AStar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/AStar.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/AStar.java	(revision )
@@ -0,0 +1,493 @@
+/**
+ *
+ */
+package com.palmap.astar.navi;
+
+
+import android.util.Log;
+
+import com.palmap.astar.navi.entity.Path;
+import com.palmap.astar.navi.entity.Vertex;
+import com.palmap.astar.navi.geojson.GeometryFactories;
+import com.vividsolutions.jts.geom.Coordinate;
+import com.vividsolutions.jts.geom.GeometryFactory;
+import com.vividsolutions.jts.geom.LineString;
+import com.vividsolutions.jts.geom.Point;
+import com.vividsolutions.jts.geom.PrecisionModel;
+import com.vividsolutions.jts.geom.impl.CoordinateArraySequence;
+import com.vividsolutions.jts.linearref.LengthIndexedLine;
+import com.vividsolutions.jts.operation.distance.DistanceOp;
+
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.PriorityQueue;
+
+/**
+ * @author Vito Zheng
+ */
+public class AStar {
+
+    private VertexLoader vertexLoader;
+    private GeometryFactory geometryFactory = new GeometryFactory(new PrecisionModel(),3857);
+    private static final double OFFSET = 1E-8;
+
+    private final G g;
+    private final H h;
+
+    public AStar(G g, H h, VertexLoader vertexLoader) {
+        this.g = g;
+        this.h = h;
+        this.vertexLoader = vertexLoader;
+    }
+
+    public List<AStarPath> astar(Point from, long fromPlanarGraphId, Point to, long toPlanarGraphId) {
+
+        PriorityQueue<AStarVertex> openList = new PriorityQueue<>();
+        HashSet<AStarVertex> closeList = new HashSet<>();
+
+        ArrayList<AStarPath> paths = new ArrayList<>();
+
+        // 1. find nearest linestring
+        // 2. find nearest vertex on that linestring as start or end vertex
+        // 3. calculate navigation based on start and end
+        // 4. find from's projection on the nearest linestring
+        // 5. if first path contains projection, then remove line from start to projection
+        // 6. if first path doesn't contains projection, then add line from projection to start
+        Path fromNearestPath = vertexLoader.findNearestPath(from, fromPlanarGraphId);
+        Path toNearestPath = vertexLoader.findNearestPath(to, toPlanarGraphId);
+        AStarVertex start = vertexLoader.findNearestVertexOnNearestPath(from, fromNearestPath);
+        AStarVertex end = vertexLoader.findNearestVertexOnNearestPath(to, toNearestPath);
+//        AStarVertex start = vertexLoader.findNearestVertex(from, fromPlanarGraphId);
+//        AStarVertex end = vertexLoader.findNearestVertex(to, toPlanarGraphId);
+        if (start == null || end == null) {
+            return Collections.emptyList();
+        }
+        if(start.getVertex().getId() == end.getVertex().getId()) {
+            paths.add(createAStarPath(start, end));
+            return paths;
+        }
+        boolean onSameFloor = fromPlanarGraphId == toPlanarGraphId;
+        if (!start.equals(end)) {
+            openList.offer(start);
+            AStarVertex current;
+            ret:
+            while (openList.size() > 0) {
+                current = openList.poll();
+                closeList.add(current);
+                if(needCalcExtraPath(toNearestPath, start, end, current)) {
+                    current.setNeedCalcExtraPath(true);
+                }
+                for (AStarPath path : current.getPaths()) {
+                    AStarVertex vertex = path.getTo();
+                    if (closeList.contains(vertex))
+                        continue;
+
+                    double g = this.g.G(current, path, onSameFloor) + current.getG();
+                    double h = this.h.H(current, end);
+
+                    if (openList.contains(vertex)) {
+                        if (g + h < vertex.getG() + vertex.getH()) {
+                            vertex.setG(g);
+                            vertex.setH(h);
+                            vertex.setParent(current);
+                            openList.remove(vertex);
+                            openList.add(vertex);
+                        }
+                    } else {
+                        vertex.setG(g);
+                        vertex.setH(h);
+                        vertex.setParent(current);
+                        openList.add(vertex);
+                    }
+                    Log.e("haha","我被执行了");
+                    if (vertex.equals(end)) {
+                        do {
+                            Log.e("haha","我被执行了111111");
+                            paths.add(vertex.getParent().findPath(vertex));
+                            vertex = vertex.getParent();
+                        } while (!vertex.equals(start));
+                        break ret;
+                    }
+                }
+            }
+
+        }
+        Collections.reverse(paths);
+        adjustPaths(paths, fromNearestPath, toNearestPath, from, to);
+        filterExtraPath(paths);
+        //paths = splitPaths(paths);
+        //paths = combineCollinear(paths);
+        return paths;
+    }
+
+    private ArrayList<AStarPath> combineCollinear(ArrayList<AStarPath> paths) {
+        int size = paths.size();
+        if (size < 2) {
+            return paths;
+        }
+        if (!hasCanCombined(paths)) {
+            return paths;
+        }
+        ArrayList<AStarPath> newPaths = new ArrayList<>();
+        for (int i = 0; i < size; i++) {
+            if (i >= paths.size()) {
+                break;
+            }
+
+            AStarPath path1 = paths.get(i);
+            if (i == paths.size() - 1) {
+                newPaths.add(path1);
+                break;
+            }
+            if (path1 instanceof AStarConnectionPath) {
+                newPaths.add(path1);
+                continue;
+            }
+            AStarPath path2 = paths.get(i + 1);
+            if (path2 instanceof AStarConnectionPath) {
+                newPaths.add(path1);
+                continue;
+            }
+            if (checkIfCanCombine((AStarLanePath) path1, (AStarLanePath) path2)) {
+                AStarLanePath newPath = combineTwoPaths((AStarLanePath) path1, (AStarLanePath) path2);
+                newPaths.add(newPath);
+                paths.remove(path2);
+            } else {
+                newPaths.add(path1);
+            }
+        }
+        return combineCollinear(newPaths);
+    }
+
+    private AStarLanePath combineTwoPaths(AStarLanePath path1, AStarLanePath path2) {
+        Path path = new Path();
+        path.setId(path1.getPath().getId());
+        path.setPlanarGraph(path1.getPath().getPlanarGraph());
+        path.setMapId(path1.getPath().getMapId());
+        path.setFrom(path1.getFrom().getVertex());
+        path.setTo(path2.getTo().getVertex());
+        LineString shape1 = (LineString) path1.getPath().getShape().clone();
+        LineString shape2 = (LineString) path2.getPath().getShape().clone();
+        if (path1.isReverse() != path2.isReverse()) {
+            shape2 = (LineString) shape2.reverse();
+        }
+        LineString shape = mergeTwoLineString(shape1, shape2, path1.isReverse());
+        path.setShape(shape);
+        return new AStarLanePath(path, this.vertexLoader, path1.isReverse());
+    }
+
+    private LineString mergeTwoLineString(LineString shape1, LineString shape2, boolean reverse) {
+        LineString lineString;
+        if (reverse) {
+            lineString = GeometryFactories.pseudoMercator().createLineString(new CoordinateArraySequence(
+                    new Coordinate[]{shape2.getStartPoint().getCoordinate(), shape1.getEndPoint().getCoordinate()}));
+        } else {
+            lineString = GeometryFactories.pseudoMercator().createLineString(new CoordinateArraySequence(
+                    new Coordinate[]{shape1.getStartPoint().getCoordinate(), shape2.getEndPoint().getCoordinate()}));
+        }
+        return lineString;
+    }
+
+    private boolean hasCanCombined(List<AStarPath> paths) {
+        for (int i = 0; i < paths.size() - 1; i++) {
+            AStarPath path1 = paths.get(i);
+            if (path1 instanceof AStarConnectionPath) {
+                continue;
+            }
+            AStarPath path2 = paths.get(i + 1);
+            if (path2 instanceof AStarConnectionPath) {
+                continue;
+            }
+            if (checkIfCanCombine((AStarLanePath) path1, (AStarLanePath) path2)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean checkIfCanCombine(AStarLanePath path1, AStarLanePath path2) {
+        if (!(path1.getPath().getPlanarGraph() == path2.getPath().getPlanarGraph())) {
+            return false;
+        }
+        if (checkIfMultiPoints(path1) || checkIfMultiPoints(path2)) {
+            return false;
+        }
+//        if(DistanceOp.distance(path1.getPath().getShape().getEndPoint(),path2.getPath().getShape().getStartPoint()) > OFFSET)
+//            return false;
+        return checkIfCollinear(path1, path2);
+    }
+
+    private boolean checkIfMultiPoints(AStarLanePath path) {
+        return path.getPath().getShape().getCoordinates().length > 2;
+    }
+
+    private boolean checkIfCollinear(AStarLanePath path1, AStarLanePath path2) {
+        double slope1 = getSlope(path1);
+        double slope2 = getSlope(path2);
+        if (Double.isInfinite(slope1) && Double.isInfinite(slope2)) {
+            return true;
+        }
+        double arctan1 = Math.atan(slope1);
+        double acrtan2 = Math.atan(slope2);
+        return (Math.abs(acrtan2 - arctan1) < 0.05) || (Math.PI - Math.abs(acrtan2 - arctan1) < 0.05);
+    }
+
+    private double getSlope(AStarLanePath path) {
+        LineString shape = (LineString) path.getPath().getShape();
+        double x1 = shape.getStartPoint().getX();
+        double y1 = shape.getStartPoint().getY();
+        double x2 = shape.getEndPoint().getX();
+        double y2 = shape.getEndPoint().getY();
+        return (y2 - y1) / (x2 - x1);
+    }
+
+    private ArrayList<AStarPath> splitPaths(List<AStarPath> paths) {
+        ArrayList<AStarPath> aStarPaths = new ArrayList<>();
+        for (AStarPath path : paths) {
+            if (path instanceof AStarLanePath) {
+                aStarPaths.addAll(mSplitPath((AStarLanePath) path));
+            } else {
+                aStarPaths.add(path);
+            }
+        }
+        return aStarPaths;
+    }
+
+    private List<AStarLanePath> mSplitPath(AStarLanePath aStarLanePath) {
+        List<AStarLanePath> aStarPaths = new ArrayList<>();
+        LineString pathLineString = (LineString) aStarLanePath.getPath().getShape().clone();
+        int count = aStarLanePath.getPath().getShape().getCoordinates().length;
+        if (count > 2) {
+            if (!aStarLanePath.isReverse()) {
+                for (int i = 0; i < count - 1; i++) {
+                    LineString lineString = GeometryFactories.pseudoMercator().createLineString(new CoordinateArraySequence(
+                            new Coordinate[]{pathLineString.getPointN(i).getCoordinate(), pathLineString.getPointN(i + 1).getCoordinate()}));
+                    Path path = new Path();
+                    path.setId(aStarLanePath.getPath().getId());
+                    Vertex fromVertex = new Vertex();
+                    Vertex toVertex = new Vertex();
+                    fromVertex.setShape(pathLineString.getPointN(i));
+                    toVertex.setShape(pathLineString.getPointN(i + 1));
+                    path.setFrom(fromVertex);
+                    path.setTo(toVertex);
+                    path.setPlanarGraph(aStarLanePath.getPath().getPlanarGraph());
+                    path.setMapId(aStarLanePath.getPath().getMapId());
+                    path.setShape(lineString);
+                    aStarPaths.add(new AStarLanePath(path, this.vertexLoader, false));
+                }
+            } else {
+                for (int i = count - 1; i > 0; i--) {
+                    LineString lineString = GeometryFactories.pseudoMercator().createLineString(new CoordinateArraySequence(
+                            new Coordinate[]{pathLineString.getPointN(i).getCoordinate(), pathLineString.getPointN(i - 1).getCoordinate()}));
+                    Path path = new Path();
+                    path.setId(aStarLanePath.getPath().getId());
+                    Vertex fromVertex = new Vertex();
+                    Vertex toVertex = new Vertex();
+                    fromVertex.setShape(pathLineString.getPointN(i));
+                    toVertex.setShape(pathLineString.getPointN(i - 1));
+                    path.setFrom(fromVertex);
+                    path.setTo(toVertex);
+                    path.setPlanarGraph(aStarLanePath.getPath().getPlanarGraph());
+                    path.setMapId(aStarLanePath.getPath().getMapId());
+                    aStarLanePath.getFrom().getVertex().getShape();
+                    path.setShape(lineString);
+                    aStarPaths.add(new AStarLanePath(path, this.vertexLoader, false));
+                }
+            }
+            return aStarPaths;
+        }else {
+            aStarPaths.add(aStarLanePath);
+            return aStarPaths;
+        }
+    }
+
+    private boolean needCalcExtraPath(Path toNearestPath, AStarVertex start, AStarVertex end, AStarVertex current) {
+        long currentId = current.getVertex().getId();
+        return currentId == start.getVertex().getId() || currentId == end.getVertex().getId() || currentId == toNearestPath.getFrom().getId() || currentId == toNearestPath.getTo().getId();
+    }
+
+    private AStarPath createAStarPath(AStarVertex start, AStarVertex end) {
+        long planarGraph = start.getVertex().getPlanarGraph();
+        Path newPath = new Path();
+
+        List<Coordinate> coordinates = new ArrayList<>();
+        coordinates.add(start.getVertex().getShape().getCoordinate());
+        coordinates.add(end.getVertex().getShape().getCoordinate());
+        LineString lineString = geometryFactory.createLineString(new CoordinateArraySequence(coordinates.toArray(new Coordinate[0])));
+        newPath.setShape(lineString);
+        newPath.setFrom(genNewVertex(lineString.getStartPoint(), planarGraph));
+        newPath.setTo(genNewVertex(lineString.getEndPoint(), planarGraph));
+        AStarPath aStarPath = new AStarLanePath(newPath, this.vertexLoader, false);
+        return aStarPath;
+    }
+
+    private void adjustPaths(List<AStarPath> paths, Path fromNearestPath, Path toNearestPath, Point from, Point to) {
+        adjustFirstPath(paths, fromNearestPath, from);
+        adjustLastPath(paths, toNearestPath, to);
+        filterExtraPath(paths);
+    }
+
+    private void adjustFirstPath(List<AStarPath> paths, Path fromNearestPath, Point from) {
+        Coordinate fromProject = null;
+        if(DistanceOp.distance(fromNearestPath.getShape(), from) >= Double.MAX_VALUE) {
+            LengthIndexedLine lil = new LengthIndexedLine(fromNearestPath.getShape());
+            fromProject = lil.extractPoint(fromNearestPath.getShape().getLength() / 2.0);
+        } else {
+            fromProject = DistanceOp.nearestPoints(fromNearestPath.getShape(), from)[0];
+        }
+        Point fromProjectPoint = geometryFactory.createPoint(fromProject);
+        exactPaths(paths, fromProjectPoint, true);
+    }
+
+    private void adjustLastPath(List<AStarPath> paths, Path toNearestPath, Point to) {
+        Coordinate toProject = null;
+        if(DistanceOp.distance(toNearestPath.getShape(), to) >= Double.MAX_VALUE) {
+            LengthIndexedLine lil = new LengthIndexedLine(toNearestPath.getShape());
+            toProject = lil.extractPoint(toNearestPath.getShape().getLength() / 2.0);
+        } else {
+            toProject = DistanceOp.nearestPoints(toNearestPath.getShape(), to)[0];
+        }
+        Point toProjectPoint = geometryFactory.createPoint(toProject);
+        exactPaths(paths, toProjectPoint, false);
+    }
+
+    private void exactPaths(List<AStarPath> paths, Point point, boolean isFromAdj) {
+        if(paths == null || paths.size() == 0)
+            return;
+        int index = 0;
+        if(!isFromAdj) {
+            index = paths.size()-1;
+        }
+        AStarPath aStarPath = paths.get(index);
+        if(!(aStarPath instanceof AStarLanePath))
+            return;
+        boolean isPathContainsProject = checkIfPointOnLine(point, ((AStarLanePath) aStarPath).getPath().getShape());
+        AStarPath exactPath = genExactPath(((AStarLanePath) aStarPath), point, isFromAdj, isPathContainsProject);
+        if(isPathContainsProject) {
+            paths.set(index, exactPath);
+        } else {
+            if(isFromAdj)
+                paths.add(index, exactPath);
+            else
+                paths.add(exactPath);
+        }
+    }
+
+    private AStarPath genExactPath(AStarLanePath aStarPath, Point point, boolean isFromAdj, boolean isPathContainsProject) {
+        long planarGraph = aStarPath.getPath().getPlanarGraph();
+        Path newPath = new Path();
+        Path origPath = aStarPath.getPath();
+        newPath.setPlanarGraph(planarGraph);
+        newPath.setDirection(origPath.getDirection());
+        newPath.setRank(origPath.getRank());
+        LineString[] segments = splitPath(aStarPath);
+        List<Coordinate> coordinates = new ArrayList<>();
+
+        if(isPathContainsProject) {
+            int indexOfProjectLiedOn = getIndexProjectliedOn(point, segments);
+            if(isFromAdj) {
+                coordinates.add(point.getCoordinate());
+                LineString[] validSegments = Arrays.copyOfRange(segments, indexOfProjectLiedOn, segments.length);
+                for (int i = indexOfProjectLiedOn+1; i < validSegments.length; i++) {
+                    coordinates.addAll(Arrays.asList(validSegments[i].getCoordinates()));
+                }
+                if(coordinates.size() == 1) {
+                    int index = validSegments.length > indexOfProjectLiedOn ? indexOfProjectLiedOn : validSegments.length-1;
+                    coordinates.add(validSegments[index].getEndPoint().getCoordinate());
+                }
+            } else {
+                LineString[] validSegments = Arrays.copyOfRange(segments, 0, indexOfProjectLiedOn+1);
+                for(int i = 0; i < indexOfProjectLiedOn; i++) {
+                    coordinates.addAll(Arrays.asList(validSegments[i].getCoordinates()));
+                }
+                if(coordinates.size() == 0) {
+                    int index = validSegments.length > indexOfProjectLiedOn ? indexOfProjectLiedOn : validSegments.length-1;
+                    coordinates.add(validSegments[index].getStartPoint().getCoordinate());
+                }
+                coordinates.add(point.getCoordinate());
+            }
+        } else {
+            if(isFromAdj) {
+                coordinates.add(point.getCoordinate());
+                coordinates.add(aStarPath.getFrom().getVertex().getShape().getCoordinate());
+            } else {
+                coordinates.add(aStarPath.getTo().getVertex().getShape().getCoordinate());
+                coordinates.add(point.getCoordinate());
+            }
+        }
+        LineString lineString = geometryFactory.createLineString(new CoordinateArraySequence(coordinates.toArray(new Coordinate[0])));
+        newPath.setShape(lineString);
+        newPath.setFrom(genNewVertex(lineString.getStartPoint(), planarGraph));
+        newPath.setTo(genNewVertex(lineString.getEndPoint(), planarGraph));
+        AStarPath exactPath = new AStarLanePath(newPath, this.vertexLoader, false);
+        return exactPath;
+    }
+
+    private int getIndexProjectliedOn(Point point, LineString[] segments) {
+        int target = 0;
+        for(int i=0; i<segments.length; i++) {
+            if(checkIfPointOnLine(point, segments[i])) {
+                target = i;
+            }
+        }
+        return target;
+    }
+
+    private LineString[] splitPath(AStarLanePath aStarPath) {
+        Path path = aStarPath.getPath();
+        LineString shape = (LineString) path.getShape().clone();
+        List<Coordinate> coordinates = Arrays.asList(shape.getCoordinates());
+        if(aStarPath.isReverse()) {
+            Collections.reverse(coordinates);
+        }
+        LineString[] segments = new LineString[coordinates.size()-1];
+        for(int i=0; i<coordinates.size()-1; i++) {
+            Coordinate start = coordinates.get(i);
+            Coordinate end = coordinates.get(i+1);
+            LineString segment = new LineString(new CoordinateArraySequence(new Coordinate[]{start, end}), geometryFactory);
+            segments[i] = segment;
+        }
+        return segments;
+    }
+
+    private Vertex genNewVertex(Point point, long planarGraph) {
+        if(point == null)
+            return null;
+        Vertex vertex = new Vertex();
+        vertex.setPlanarGraph(planarGraph);
+        vertex.setShape(point);
+        return vertex;
+    }
+
+    private boolean checkIfPointOnLine(Point point, LineString line) {
+        double distance = DistanceOp.distance(point, line);
+        return distance < OFFSET;
+    }
+
+    private void filterExtraPath(List<AStarPath> paths) {
+        if(paths == null || paths.size() == 0)
+            return;
+        AStarPath first = paths.get(0);
+        AStarPath last = null;
+        if(paths.size() > 1) {
+            last = paths.get(paths.size() - 1);
+        }
+        checkThenRemove(paths, first);
+        checkThenRemove(paths, last);
+    }
+
+    private void checkThenRemove(List<AStarPath> paths,AStarPath path) {
+        if(path == null)
+            return;
+        if(path instanceof AStarLanePath) {
+            int firstNodeRank = ((AStarLanePath) path).getPath().getRank();
+            if (firstNodeRank == 10) {
+                paths.remove(path);
+            }
+        }
+    }
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RegionDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RegionDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/RegionDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,35 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-import java.io.Serializable;
-
-/**
- * Created by liupin on 2017/7/24.
- */
-public class RegionDto implements Serializable {
-    private String country;
-    private Long code;
-    private String name;
-
-    public String getCountry() {
-        return country;
-    }
-
-    public void setCountry(String country) {
-        this.country = country;
-    }
-
-    public Long getCode() {
-        return code;
-    }
-
-    public void setCode(Long code) {
-        this.code = code;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarVertex.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/AStarVertex.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ lib-astar/src/main/java/com/palmap/astar/navi/AStarVertex.java	(revision )
@@ -1,12 +1,15 @@
-package com.palmap.huayitonglib.navi.astar.navi;
+/**
+ *
+ */
+package com.palmap.astar.navi;
 
-import android.util.Log;
 
-import com.palmap.huayitonglib.navi.astar.model.path.Vertex;
+import com.palmap.astar.navi.entity.Vertex;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Objects;
 
 
 /**
@@ -18,7 +21,7 @@
     private VertexLoader loader;
     private AStarVertex parent;
     private HashMap<AStarVertex, AStarPath> paths;
-    private boolean needCalcExtraPath = true;
+    private boolean needCalcExtraPath;
 
     private double g;
     private double h;
@@ -38,7 +41,6 @@
 
     public List<AStarPath> getPaths() {
         loadPaths();
-        Log.e("xinhua","我执行了几次啊");
         return new ArrayList<>(paths.values());
     }
 
@@ -73,10 +75,8 @@
     private void loadPaths() {
         if (paths == null) {
             paths = new HashMap<>();
-            Log.e("xinhua","我执行了几次啊11111111");
-            List<AStarPath> aStarPaths = loader.loadPaths(vertex, needCalcExtraPath);
-            for (AStarPath aStarPath : aStarPaths) {
-                paths.put(aStarPath.getTo(),aStarPath);
+            for(AStarPath e : loader.loadPaths(vertex, needCalcExtraPath)){
+                paths.put(e.getTo(),e);
             }
         }
     }
@@ -95,12 +95,12 @@
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         AStarVertex that = (AStarVertex) o;
-        return vertex.equals(that.vertex);
+        return Objects.equals(vertex, that.vertex);
     }
 
     @Override
     public int hashCode() {
-        return vertex.hashCode();
+        return Objects.hash(vertex);
     }
 
     @Override
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/CategoryDto.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/CategoryDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/dto/CategoryDto.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,101 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.dto;
-
-
-import com.palmap.huayitonglib.navi.astar.model.category.CategoryLevel;
-import com.palmap.huayitonglib.navi.astar.model.category.FullCategory;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2016/10/11.
- */
-public class CategoryDto implements Serializable {
-    private long id;
-    private String name1;
-    private String name2;
-    private String name3;
-    private String name4;
-
-    private String logo;
-
-    public long getId() {
-        return id;
-    }
-
-    public void setId(long id) {
-        this.id = id;
-    }
-
-    public String getName1() {
-        return name1;
-    }
-
-    public void setName1(String name1) {
-        this.name1 = name1;
-    }
-
-    public String getName2() {
-        return name2;
-    }
-
-    public void setName2(String name2) {
-        this.name2 = name2;
-    }
-
-    public String getName3() {
-        return name3;
-    }
-
-    public void setName3(String name3) {
-        this.name3 = name3;
-    }
-
-    public String getName4() {
-        return name4;
-    }
-
-    public void setName4(String name4) {
-        this.name4 = name4;
-    }
-
-    public String getLogo() {
-        return logo;
-    }
-
-    public void setLogo(String logo) {
-        this.logo = logo;
-    }
-
-    public String getLogoName() {
-        return logoName;
-    }
-
-    public void setLogoName(String logoName) {
-        this.logoName = logoName;
-    }
-
-    public CategoryLevel getCategoryLevel() {
-        return categoryLevel;
-    }
-
-    public void setCategoryLevel(CategoryLevel categoryLevel) {
-        this.categoryLevel = categoryLevel;
-    }
-
-    public FullCategory getFullCategory() {
-        return fullCategory;
-    }
-
-    public void setFullCategory(FullCategory fullCategory) {
-        this.fullCategory = fullCategory;
-    }
-
-    @JsonIgnore
-    private String logoName;//logo名
-    @JsonIgnore
-    private CategoryLevel categoryLevel;
-    @JsonIgnore
-    private FullCategory fullCategory;
-}
Index: lib-astar/src/main/java/com/palmap/astar/navi/entity/Connection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/entity/Connection.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/entity/Connection.java	(revision )
@@ -0,0 +1,87 @@
+package com.palmap.astar.navi.entity;
+
+import android.text.TextUtils;
+
+import java.io.Serializable;
+
+/**
+ * Created by caogl on 2015/4/9.
+ */
+public class Connection implements Serializable {
+
+    private long id;
+
+    private Vertex from;
+
+    private Vertex to;
+
+    private int rank;
+
+    private Direction direction;
+
+    private long mapId;
+
+    private long categoryId;
+
+    public Connection(long mapId, String direction, int rank) {
+        this.mapId = mapId;
+        this.rank = rank;
+        this.direction = !TextUtils.isEmpty(direction)&&direction.toUpperCase().equals("ONEWAY") ? Direction.ONEWAY:Direction.TWOWAY;
+    }
+
+    public long getMapId() {
+        return mapId;
+    }
+
+    public void setMapId(long mapId) {
+        this.mapId = mapId;
+    }
+
+    public long getCategoryId() {
+        return categoryId;
+    }
+
+    public void setCategoryId(long categoryId) {
+        this.categoryId = categoryId;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public Vertex getFrom() {
+        return from;
+    }
+
+    public Vertex getTo() {
+        return to;
+    }
+
+    public int getRank() {
+        return rank;
+    }
+
+    public Direction getDirection() {
+        return direction;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public void setFrom(Vertex from) {
+        this.from = from;
+    }
+
+    public void setTo(Vertex to) {
+        this.to = to;
+    }
+
+    public void setRank(int rank) {
+        this.rank = rank;
+    }
+
+    public void setDirection(Direction direction) {
+        this.direction = direction;
+    }
+}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Facilities.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Facilities.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Facilities.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,12 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.FeatureCollection;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class Facilities extends FeatureCollection<Facility> implements Serializable {
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/CoordinateUtils.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/CoordinateUtils.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/CoordinateUtils.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,143 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-import com.vividsolutions.jts.geom.Coordinate;
-import com.vividsolutions.jts.geom.LineSegment;
-import com.vividsolutions.jts.math.Vector3D;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.LinkedHashSet;
-
-/**
- * Created by Administrator on 2017/12/4/004.
- */
-
-public final class CoordinateUtils {
-    static double M_PI = Math.PI;
-    //墨卡托转经纬度
-    public static double[] mercator2Lonlat(double mercatorX,double mercatorY)
-    {
-        double[] xy = new double[2];
-        double x = mercatorX/20037508.34*180;
-        double y = mercatorY/20037508.34*180;
-        y= 180/M_PI*(2*Math.atan(Math.exp(y*M_PI/180))-M_PI/2);
-        xy[0] = x;
-        xy[1] = y;
-        return xy;
-    }
-
-    public static double[] zMinMax(Coordinate[] cs) {
-        boolean validZFound = false;
-        double[] result = new double[2];
-        double zmin = 0.0D / 0.0;
-        double zmax = 0.0D / 0.0;
-
-        for(int t = cs.length - 1; t >= 0; --t) {
-            double z = cs[t].z;
-            if(!Double.isNaN(z)) {
-                if(validZFound) {
-                    if(z < zmin) {
-                        zmin = z;
-                    }
-
-                    if(z > zmax) {
-                        zmax = z;
-                    }
-                } else {
-                    validZFound = true;
-                    zmin = z;
-                    zmax = z;
-                }
-            }
-        }
-
-        result[0] = zmin;
-        result[1] = zmax;
-        return result;
-    }
-
-    public static double interpolate(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated) {
-        return Double.isNaN(firstCoordinate.z)?0.0D / 0.0:(Double.isNaN(lastCoordinate.z)?0.0D / 0.0:firstCoordinate.z + (lastCoordinate.z - firstCoordinate.z) * firstCoordinate.distance(toBeInterpolated) / (firstCoordinate.distance(toBeInterpolated) + toBeInterpolated.distance(lastCoordinate)));
-    }
-
-    public static boolean contains2D(Coordinate[] coords, Coordinate coord) {
-        Coordinate[] var2 = coords;
-        int var3 = coords.length;
-
-        for(int var4 = 0; var4 < var3; ++var4) {
-            Coordinate coordinate = var2[var4];
-            if(coordinate.equals2D(coord)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public static Coordinate vectorIntersection(Coordinate p1, Vector3D v1, Coordinate p2, Vector3D v2) {
-        Coordinate i = null;
-        double delta = v1.getX() * -v2.getY() - -v1.getY() * v2.getX();
-        if(delta != 0.0D) {
-            double k = ((p2.x - p1.x) * -v2.getY() - (p2.y - p1.y) * -v2.getX()) / delta;
-            i = new Coordinate(p1.x + k * v1.getX(), p1.y + k * v1.getY(), p1.z + k * v1.getZ());
-            if((new LineSegment(p1, new Coordinate(p1.x + v1.getX(), p1.y + v1.getY()))).projectionFactor(i) < 0.0D || (new LineSegment(p2, new Coordinate(p2.x + v2.getX(), p2.y + v2.getY()))).projectionFactor(i) < 0.0D) {
-                return null;
-            }
-        }
-
-        return i;
-    }
-
-    public static Coordinate[] removeDuplicatedCoordinates(Coordinate[] coords, boolean closeRing) {
-        LinkedHashSet finalCoords = new LinkedHashSet();
-        Coordinate prevCoord = coords[0];
-        finalCoords.add(prevCoord);
-        int nbCoords = coords.length;
-
-        for(int coordsFinal = 1; coordsFinal < nbCoords; ++coordsFinal) {
-            Coordinate closedCoords = coords[coordsFinal];
-            if(!closedCoords.equals2D(prevCoord)) {
-                finalCoords.add(closedCoords);
-                prevCoord = closedCoords;
-            }
-        }
-
-        if(closeRing) {
-            Coordinate[] var8 = (Coordinate[])finalCoords.toArray(new Coordinate[finalCoords.size()]);
-            Coordinate[] var9 = (Coordinate[]) Arrays.copyOf(var8, var8.length + 1);
-            var9[var9.length - 1] = prevCoord;
-            return var9;
-        } else {
-            return (Coordinate[])finalCoords.toArray(new Coordinate[finalCoords.size()]);
-        }
-    }
-
-    public static Coordinate[] removeRepeatedCoordinates(Coordinate[] coords, double tolerance, boolean duplicateFirstLast) {
-        ArrayList finalCoords = new ArrayList();
-        Coordinate prevCoord = coords[0];
-        finalCoords.add(prevCoord);
-        int nbCoords = coords.length;
-
-        for(int i = 1; i < nbCoords; ++i) {
-            Coordinate currentCoord = coords[i];
-            if(currentCoord.distance(prevCoord) > tolerance) {
-                finalCoords.add(currentCoord);
-                prevCoord = currentCoord;
-            }
-        }
-
-        if(!duplicateFirstLast) {
-            if(prevCoord.distance(prevCoord) <= tolerance) {
-                finalCoords.remove(finalCoords.size() - 1);
-            }
-        } else {
-            finalCoords.add(prevCoord);
-        }
-
-        return (Coordinate[])finalCoords.toArray(new Coordinate[finalCoords.size()]);
-    }
-
-    private CoordinateUtils() {
-        throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
-    }
-}
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(revision )
+++ .idea/encodings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="PROJECT" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/geojson/GeoJsonReader.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/geojson/GeoJsonReader.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ lib-astar/src/main/java/com/palmap/astar/navi/geojson/GeoJsonReader.java	(revision )
@@ -1,4 +1,4 @@
-package com.palmap.huayitonglib.navi.astar.geojson;
+package com.palmap.astar.navi.geojson;
 
 import com.vividsolutions.jts.geom.CoordinateSequence;
 import com.vividsolutions.jts.geom.Geometry;
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/FullCategory.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/FullCategory.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/category/FullCategory.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,46 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.category;
-
-import java.io.Serializable;
-
-/**
- * Created by sifan on 2017/5/11.
- */
-public class FullCategory implements Serializable {
-    private Long level1Code;
-    private Long level2Code;
-
-    public Long getLevel1Code() {
-        return level1Code;
-    }
-
-    public void setLevel1Code(Long level1Code) {
-        this.level1Code = level1Code;
-    }
-
-    public Long getLevel2Code() {
-        return level2Code;
-    }
-
-    public void setLevel2Code(Long level2Code) {
-        this.level2Code = level2Code;
-    }
-
-    public Long getLevel3Code() {
-        return level3Code;
-    }
-
-    public void setLevel3Code(Long level3Code) {
-        this.level3Code = level3Code;
-    }
-
-    public Long getLevel4Code() {
-        return level4Code;
-    }
-
-    public void setLevel4Code(Long level4Code) {
-        this.level4Code = level4Code;
-    }
-
-    private Long level3Code;
-    private Long level4Code;
-}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ .idea/modules.xml	(revision )
@@ -6,6 +6,7 @@
       <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
       <module fileurl="file://$PROJECT_DIR$/demo/demo.iml" filepath="$PROJECT_DIR$/demo/demo.iml" />
       <module fileurl="file://$PROJECT_DIR$/huayitonglib/huayitonglib.iml" filepath="$PROJECT_DIR$/huayitonglib/huayitonglib.iml" />
+      <module fileurl="file://$PROJECT_DIR$/lib-astar/lib-astar.iml" filepath="$PROJECT_DIR$/lib-astar/lib-astar.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/NavigateManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/NavigateManager.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/NavigateManager.java	(revision )
@@ -2,8 +2,8 @@
 
 import android.util.Log;
 
-import com.palmap.huayitonglib.navi.astar.navi.AStarLanePath;
-import com.palmap.huayitonglib.navi.astar.navi.AStarPath;
+import com.palmap.astar.navi.AStarLanePath;
+import com.palmap.astar.navi.AStarPath;
 import com.palmap.huayitonglib.navi.entity.ActionState;
 import com.palmap.huayitonglib.navi.entity.NaviInfo;
 import com.palmap.huayitonglib.navi.entity.NodeInfo;
@@ -120,7 +120,7 @@
                 Point endPoint = (Point) path.getTo().getVertex().getShape();
                 partInfo.setIndex(index);
                 partInfo.setFloorId((((AStarLanePath) path).getPath() == null
-                        ? -1L : ((AStarLanePath) path).getPath().getPlanarGraphId()));
+                        ? -1L : ((AStarLanePath) path).getPath().getPlanarGraph()));
 //                partInfo.setFloorHeight(getFloorHeight(path.getAltitude()));
                 if (startPoint != null && endPoint != null) {
                     partInfo.setStartNode(
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Snap.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Snap.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/ST_Snap.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,22 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.operation.overlay.snap.GeometrySnapper;
-
-/**
- * Created by Administrator on 2017/12/1/001.
- */
-
-public class ST_Snap {
-    public ST_Snap() {
-    }
-
-    public static Geometry snap(Geometry geometryA, Geometry geometryB, double distance) {
-        if(geometryA != null && geometryB != null) {
-            Geometry[] snapped = GeometrySnapper.snap(geometryA, geometryB, distance);
-            return snapped[0];
-        } else {
-            return null;
-        }
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Area.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Area.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/Area.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,141 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.Feature;
-
-import org.codehaus.jackson.annotate.JsonIgnore;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/18/16.
- */
-public class Area extends Feature implements Serializable {
-
-    @JsonIgnore
-    public String getAddress() {
-        return getProperty("address");
-    }
-
-    public void setAddress(String address) {
-        setProperty("address", address);
-    }
-
-    // TODO: 2016/8/10 change camel to underline
-    @JsonIgnore
-    public String getEnglishName() {
-        return getProperty("englishName");
-    }
-
-    public void setEnglishName(String englishName) {
-        setProperty("englishName", englishName);
-    }
-
-    @JsonIgnore
-    public Long getPlanarGraph() {
-        return getLongProperty("planar_graph");
-    }
-
-    public void setPlanarGraph(Long planarGraph) {
-        setProperty("planar_graph", planarGraph);
-    }
-
-    @JsonIgnore
-    public String getDetailType() {
-        return getProperty("detail_type");
-    }
-
-    public void setDetailType(String type) {
-        setProperty("detail_type", type);
-    }
-
-    @JsonIgnore
-    public String getLocationType() {
-        return getProperty("location_type");
-    }
-
-    public void setLocationType(String type) {
-        setProperty("location_type", type);
-    }
-
-    @JsonIgnore
-    public String getName() {
-        return getProperty("name");
-    }
-
-    public void setName(String name) {
-        setProperty("name", name);
-    }
-
-    @JsonIgnore
-    public String getDisplay() {
-        return getProperty("display");
-    }
-
-    public void setDisplay(String display) {
-        setProperty("display", display);
-    }
-
-    @JsonIgnore
-    public Long getCategory() {
-        return getLongProperty("category");
-    }
-
-    public void setCategory(Long category) {
-        setProperty("category", category);
-    }
-
-    @JsonIgnore
-    public String getLogo() {
-        return getProperty("logo");
-    }
-
-    public void setLogo(String logo) {
-        setProperty("logo", logo);
-    }
-
-    @JsonIgnore
-    public boolean isCommonArea() {
-        return getProperty("common_area");
-    }
-
-    public void setCommonArea(boolean commonArea) {
-        setProperty("common_area", commonArea);
-    }
-
-    public void setMaxScale(Double maxScale) {
-        setProperty("max_scale", maxScale);
-    }
-
-    @JsonIgnore
-    public Double getMaxScale() {
-        return getProperty("max_scale");
-    }
-
-    public void setMinScale(Double minScale) {
-        setProperty("min_scale", minScale);
-    }
-
-    @JsonIgnore
-    public Double getMinScale() {
-        return getProperty("min_scale");
-    }
-
-    @JsonIgnore
-    public String getDataId() {
-        return getProperty("data_id");
-    }
-
-    public void setDataId(String dataId) {
-        setProperty("data_id", dataId);
-    }
-
-    @JsonIgnore
-    public Long getRelatedBuildingId() {
-        return getLongProperty("related_building_id");
-    }
-
-    public void setRelatedBuildingId(Long relatedBuildingId) {
-        setProperty("related_building_id", relatedBuildingId);
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/H.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/H.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/H.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,8 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-/**
- * @author Vito Zheng
- */
-public interface H {
-    double H(AStarVertex current, AStarVertex target);
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/PlanarGraph.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/PlanarGraph.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/model/graph/PlanarGraph.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,76 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.model.graph;
-
-
-import com.palmap.huayitonglib.navi.astar.model.Base;
-
-import java.io.Serializable;
-
-/**
- * Created by wyx on 2/8/16.
- */
-public class PlanarGraph extends Base implements Serializable {
-    private Long id;
-    private Frames frames;
-    private Areas areas;
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Frames getFrames() {
-        return frames;
-    }
-
-    public void setFrames(Frames frames) {
-        this.frames = frames;
-    }
-
-    public Areas getAreas() {
-        return areas;
-    }
-
-    public void setAreas(Areas areas) {
-        this.areas = areas;
-    }
-
-    public Facilities getFacilities() {
-        return facilities;
-    }
-
-    public void setFacilities(Facilities facilities) {
-        this.facilities = facilities;
-    }
-
-    public Doors getDoors() {
-        return doors;
-    }
-
-    public void setDoors(Doors doors) {
-        this.doors = doors;
-    }
-
-    public Long getMapId() {
-        return mapId;
-    }
-
-    public void setMapId(Long mapId) {
-        this.mapId = mapId;
-    }
-
-    public Long getBuildingId() {
-        return buildingId;
-    }
-
-    public void setBuildingId(Long buildingId) {
-        this.buildingId = buildingId;
-    }
-
-    private Facilities facilities;
-    private Doors doors;
-    private Long mapId;
-    private Long buildingId;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/NaviConstants.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/NaviConstants.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/navi/NaviConstants.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,9 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.navi;
-
-/**
- * Created by sifan on 2017/7/11.
- */
-public class NaviConstants {
-
-    public static final double TOLERANCE = 0.01;
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/utils/CategoryUtils.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/utils/CategoryUtils.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/utils/CategoryUtils.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,90 +0,0 @@
-package com.palmap.huayitonglib.navi.astar.utils;
-
-
-import com.palmap.huayitonglib.navi.astar.model.category.CategoryLevel;
-
-/**
- * Created by mac on 15/9/22.
- */
-public class CategoryUtils {
-
-    private static final long LEVEL_1_WEIGHT = 10000000L;
-
-    private static final long LEVEL_2_WEIGHT = 1000000L;
-
-    private static final long LEVEL_3_WEIGHT = 1000L;
-
-    private static final long LEVEL_4_WEIGHT = 1L;
-
-    public static long getLevel1Code(long categoryCode) {
-        return categoryCode / LEVEL_1_WEIGHT * LEVEL_1_WEIGHT;
-    }
-
-    public static long getLevel2Code(long categoryCode) {
-        return categoryCode / LEVEL_2_WEIGHT * LEVEL_2_WEIGHT;
-    }
-
-    public static long getLevel3Code(long categoryCode) {
-        return categoryCode / LEVEL_3_WEIGHT * LEVEL_3_WEIGHT;
-    }
-
-    public static long getLevel4Code(long categoryCode) {
-        return categoryCode / LEVEL_4_WEIGHT * LEVEL_4_WEIGHT;
-    }
-
-    /**
-     * get the next same level category code to the param.
-     * for example,
-     * return 11000200 if input is 11000100,
-     * return 11000102 if input is 11000101
-     *
-     * @return
-     */
-    public static long getNextCategoryCode(int categoryCode) {
-        if (categoryCode % LEVEL_1_WEIGHT == 0) {
-            return (categoryCode / LEVEL_1_WEIGHT + 1) * LEVEL_1_WEIGHT;
-        } else if (categoryCode % LEVEL_2_WEIGHT == 0) {
-            return (categoryCode / LEVEL_2_WEIGHT + 1) * LEVEL_2_WEIGHT;
-        } else if (categoryCode % LEVEL_3_WEIGHT == 0) {
-            return (categoryCode / LEVEL_3_WEIGHT + 1) * LEVEL_3_WEIGHT;
-        } else if (categoryCode % LEVEL_4_WEIGHT == 0) {
-            return (categoryCode / LEVEL_4_WEIGHT + 1) * LEVEL_4_WEIGHT;
-        } else {
-            return categoryCode + 1;
-        }
-    }
-
-    public static int getCategoryLevel(long categoryCode) {
-        if (categoryCode % 10000000 == 0) {
-            return 1;
-        } else if (categoryCode % 1000000 == 0) {
-            return 2;
-        } else if (categoryCode % 1000 == 0) {
-            return 3;
-        } else {
-            return 4;
-        }
-    }
-
-    public static CategoryLevel getLevel(long categoryCode) {
-        if (categoryCode % 10000000 == 0) {
-            return CategoryLevel.ONE;
-        } else if (categoryCode % 1000000 == 0) {
-            return CategoryLevel.TWO;
-        } else if (categoryCode % 1000 == 0) {
-            return CategoryLevel.THREE;
-        } else {
-            return CategoryLevel.FOUR;
-        }
-    }
-
-    public static boolean isElevator(long categoryCode) {
-        if (categoryCode == 24092000 || categoryCode == 24091000) return true;
-        return false;
-    }
-
-    public static boolean isStair(long categoryCode) {
-        if (categoryCode == 24097000 || categoryCode == 24098000 || categoryCode == 13164000) return true;
-        return false;
-    }
-}
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/route/MapBoxNavigateManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/route/MapBoxNavigateManager.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/route/MapBoxNavigateManager.java	(revision )
@@ -9,13 +9,13 @@
 import com.mapbox.services.commons.geojson.FeatureCollection;
 import com.mapbox.services.commons.geojson.LineString;
 import com.mapbox.services.commons.models.Position;
-import com.palmap.huayitonglib.navi.astar.model.path.TreatedRoadNet;
-import com.palmap.huayitonglib.navi.astar.navi.AStar;
-import com.palmap.huayitonglib.navi.astar.navi.AStarPath;
-import com.palmap.huayitonglib.navi.astar.navi.AStarVertex;
-import com.palmap.huayitonglib.navi.astar.navi.DefaultG;
-import com.palmap.huayitonglib.navi.astar.navi.DefaultH;
-import com.palmap.huayitonglib.navi.astar.navi.VertexLoader;
+import com.palmap.astar.navi.AStar;
+import com.palmap.astar.navi.AStarPath;
+import com.palmap.astar.navi.AStarVertex;
+import com.palmap.astar.navi.DefaultG;
+import com.palmap.astar.navi.DefaultH;
+import com.palmap.astar.navi.PathService;
+import com.palmap.astar.navi.VertexLoader;
 import com.vividsolutions.jts.geom.Coordinate;
 import com.vividsolutions.jts.geom.GeometryFactory;
 import com.vividsolutions.jts.geom.Point;
@@ -68,11 +68,13 @@
             public void run() {
                 try {
                     String pathJsonStr = loadFromAsset(MapBoxNavigateManager.this.context, routeDataPath);
-                    JSONObject pathObject = new JSONObject(pathJsonStr);
-                    TreatedRoadNet treatedRoadNet = new TreatedRoadNet(pathObject.optLong("mapId"), pathObject
-                            .optJSONArray("vertexes"), pathObject.optJSONObject("paths"), pathObject.optJSONObject
-                            ("connections"));
-                    aStar = new AStar(new DefaultG(), new DefaultH(), new VertexLoader(treatedRoadNet));
+                    JSONObject jsonObject = new JSONObject(pathJsonStr);
+                    PathService pathService = new PathService(
+                            jsonObject.getJSONArray("vertexes"),
+                            jsonObject.getJSONObject("paths"),
+                            jsonObject.getJSONObject("connections")
+                    );
+                    aStar = new AStar(new DefaultG(), new DefaultH(), new VertexLoader(pathService));
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
@@ -124,11 +126,11 @@
         if (!precondition()) {
             return;
         }
-        List<AStarPath> routes = aStar.astar(
+        List<AStarPath> routes =  aStar.astar(
-                geometryFactory.createPoint(new Coordinate(fromX, fromY)),
+                geometryFactory.createPoint(new Coordinate(fromX,fromY)),
                 fromPlanargraph,
-                geometryFactory.createPoint(new Coordinate(toX, toY)),
+                geometryFactory.createPoint(new Coordinate(toX,toY)),
-                toPlanargraph, 0
+                toPlanargraph
         );
         if (routes == null || routes.size() == 0) {
             this.listener.onNavigateComplete(NavigateState.NAVIGATE_REQUEST_ERROR, null, fromX, fromY, fromPlanargraph,
@@ -144,7 +146,7 @@
         for (AStarPath aStarPath : routes) {
             AStarVertex fromVertex = aStarPath.getFrom();
             AStarVertex toVertex = aStarPath.getTo();
-            if (fromPlanargraph == fromVertex.getVertex().getPlanarGraphId()) {
+            if (fromPlanargraph == fromVertex.getVertex().getPlanarGraph()) {
                 Point startPoint = (Point) fromVertex.getVertex().getShape();
                 double[] startPosition = webMercator2LatLng(startPoint.getX(), startPoint
                         .getY());
@@ -157,7 +159,7 @@
                 features.add(Feature.fromGeometry(lineString));
                 // TODO: 2017/12/12/012 这个点设置的是否准确  需要验证
                 shape = (Point) toVertex.getVertex().getShape();
-            } else if (toPlanargraph == fromVertex.getVertex().getPlanarGraphId()) {
+            } else if (toPlanargraph == fromVertex.getVertex().getPlanarGraph()) {
                 if (endShape == null) {
                     endShape = (Point) fromVertex.getVertex().getShape();
                 }
Index: lib-astar/src/main/java/com/palmap/astar/navi/entity/Path.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/java/com/palmap/astar/navi/entity/Path.java	(revision )
+++ lib-astar/src/main/java/com/palmap/astar/navi/entity/Path.java	(revision )
@@ -0,0 +1,115 @@
+package com.palmap.astar.navi.entity;
+
+import android.text.TextUtils;
+
+import com.vividsolutions.jts.geom.LineString;
+
+/**
+ * Created by caogl on 2015/4/1.
+ */
+public class Path {
+
+    private long id;
+
+    private int rank;
+
+    private Direction direction;
+
+    private LineString shape;
+
+    private Vertex from;
+
+    private Vertex to;
+
+    private long planarGraph;
+
+    private long mapId;
+
+    private double altitude;
+
+
+    public Path() {
+    }
+
+    public Path(long mapId, int rank, String direction, LineString shape, long planarGraphId, long pathId, double altitude) {
+        this.mapId = mapId;
+        this.rank = rank;
+        this.direction = !TextUtils.isEmpty(direction)&&direction.toUpperCase().equals("ONEWAY") ? Direction.ONEWAY:Direction.TWOWAY;
+        this.shape = shape;
+        this.planarGraph = planarGraphId;
+        this.id = pathId;
+        this.altitude = altitude;
+    }
+
+    public long getMapId() {
+        return mapId;
+    }
+
+    public void setMapId(long mapId) {
+        this.mapId = mapId;
+    }
+
+    public double getAltitude() {
+        return altitude;
+    }
+
+    public void setAltitude(double altitude) {
+        this.altitude = altitude;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public int getRank() {
+        return rank;
+    }
+
+    public Direction getDirection() {
+        return direction;
+    }
+
+    public Vertex getFrom() {
+        return from;
+    }
+
+    public Vertex getTo() {
+        return to;
+    }
+
+    public LineString getShape() {
+        return shape;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public void setRank(int rank) {
+        this.rank = rank;
+    }
+
+    public void setDirection(Direction direction) {
+        this.direction = direction;
+    }
+
+    public void setShape(LineString shape) {
+        this.shape = shape;
+    }
+
+    public void setFrom(Vertex from) {
+        this.from = from;
+    }
+
+    public void setTo(Vertex to) {
+        this.to = to;
+    }
+
+    public long getPlanarGraph() {
+        return planarGraph;
+    }
+
+    public void setPlanarGraph(long planarGraph) {
+        this.planarGraph = planarGraph;
+    }
+}
Index: lib-astar/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib-astar/src/main/res/values/strings.xml	(revision )
+++ lib-astar/src/main/res/values/strings.xml	(revision )
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">astar</string>
+</resources>
Index: huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/SpatialException.java
===================================================================
--- huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/SpatialException.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
+++ huayitonglib/src/main/java/com/palmap/huayitonglib/navi/astar/SpatialException.java	(revision d0dd5941ad68741f77a2a283b1c61113e8e66254)
@@ -1,22 +0,0 @@
-package com.palmap.huayitonglib.navi.astar;
-
-/**
- * Created by Administrator on 2017/12/1/001.
- */
-
-public class SpatialException extends RuntimeException{
-    public SpatialException() {
-    }
-
-    public SpatialException(String message) {
-        super(message);
-    }
-
-    public SpatialException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public SpatialException(Throwable cause) {
-        super(cause);
-    }
-}
