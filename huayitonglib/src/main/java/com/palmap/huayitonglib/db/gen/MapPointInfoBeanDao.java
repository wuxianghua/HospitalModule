package com.palmap.huayitonglib.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.palmap.huayitonglib.db.entity.MapPointInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAP_POINT_INFO_BEAN".
*/
public class MapPointInfoBeanDao extends AbstractDao<MapPointInfoBean, Long> {

    public static final String TABLENAME = "MAP_POINT_INFO_BEAN";

    /**
     * Properties of entity MapPointInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PoiId = new Property(1, String.class, "poiId", false, "POI_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property FloorName = new Property(4, String.class, "floorName", false, "FLOOR_NAME");
        public final static Property Point = new Property(5, String.class, "point", false, "POINT");
        public final static Property Longitude = new Property(6, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(7, String.class, "latitude", false, "LATITUDE");
        public final static Property FloorId = new Property(8, String.class, "floorId", false, "FLOOR_ID");
    }


    public MapPointInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MapPointInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAP_POINT_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"POI_ID\" TEXT," + // 1: poiId
                "\"NAME\" TEXT," + // 2: name
                "\"ADDRESS\" TEXT," + // 3: address
                "\"FLOOR_NAME\" TEXT," + // 4: floorName
                "\"POINT\" TEXT," + // 5: point
                "\"LONGITUDE\" TEXT," + // 6: longitude
                "\"LATITUDE\" TEXT," + // 7: latitude
                "\"FLOOR_ID\" TEXT);"); // 8: floorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAP_POINT_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MapPointInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poiId = entity.getPoiId();
        if (poiId != null) {
            stmt.bindString(2, poiId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String floorName = entity.getFloorName();
        if (floorName != null) {
            stmt.bindString(5, floorName);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(6, point);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(7, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(8, latitude);
        }
 
        String floorId = entity.getFloorId();
        if (floorId != null) {
            stmt.bindString(9, floorId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MapPointInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poiId = entity.getPoiId();
        if (poiId != null) {
            stmt.bindString(2, poiId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String floorName = entity.getFloorName();
        if (floorName != null) {
            stmt.bindString(5, floorName);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(6, point);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(7, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(8, latitude);
        }
 
        String floorId = entity.getFloorId();
        if (floorId != null) {
            stmt.bindString(9, floorId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MapPointInfoBean readEntity(Cursor cursor, int offset) {
        MapPointInfoBean entity = new MapPointInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // poiId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // floorName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // point
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // latitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // floorId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MapPointInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoiId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFloorName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPoint(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFloorId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MapPointInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MapPointInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MapPointInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
